@page "/VpnBuild"
@page "/Windows/VpnBuild"
<PageTitle>VPN ProfileXML Builder - AzToolbox</PageTitle>

@using ProfileXMLBuilder.Lib
@using AzToolbox.Components.VpnBuild

@inject NavigationManager NavMan
@inject INotificationService NotificationService
@inject IModalService ModalService
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject VpnBuildService svc

<Splitter>
    <SplitterSection Style="height:calc(100vh - 74px - 1rem); overflow-y:scroll">
        <Divider DividerType="DividerType.TextContent" Text="PreSet" />
        <Div Display="Display.Flex" Flex="Flex.Row.AlignContent.Center">
            <SelectList TValue="VpnBuildService.PreSets"
                        TItem="VpnBuildService.PreSets"
                        TextField="@(s=>s.ToString().Replace("__", "-").Replace('_','/'))"
                        ValueField="s=>s"
                        Data="@(Enum.GetValues<VpnBuildService.PreSets>())"
                        @bind-SelectedValue="set" />
            <Button Color="Color.Warning" Clicked="LoadPreSet" Margin="Margin.Is1.FromStart" Width="Width.Px(150)">Load</Button>
        </Div>
        <Divider DividerType="DividerType.TextContent" Text="Basic Settings" />
        <Field>
            <Switch TValue="bool" @bind-Checked="@svc.UserTunnel">User Tunnel</Switch>
        </Field>
        <Field>
            <FieldLabel>Server Address</FieldLabel>
            <TextEdit @bind-Text="@svc.VpnServer" />
        </Field>
        <Divider DividerType="DividerType.TextContent" Text="DNS Settings" />
        <Tooltip Text="Comma separated DNS suffix list." Placement="TooltipPlacement.Right">
            <Field>
                <FieldLabel>Domain DNS Suffix</FieldLabel>
                <TextEdit @bind-Text="@svc.DomainDnsSuffix" />
            </Field>
        </Tooltip>
        <Tooltip Text="Comma separated name list." Placement="TooltipPlacement.Right">
            <Field>
                <FieldLabel>Trusted Network Detection</FieldLabel>
                <TextEdit @bind-Text="@svc.TrustedNetworkDetection" />
            </Field>
        </Tooltip>
        @if (svc.UserTunnel)
        {
            <Div ElementId="ut-fields">
                <Tooltip Text="Generate NRPT rules according to domain DNS suffix." Placement="TooltipPlacement.Right">
                    <Field>
                        <Switch TValue="bool" @bind-Checked="@svc.DomainNRPT">Domain NRPT Generataion</Switch>
                    </Field>
                </Tooltip>
                @if (svc.DomainNRPT)
                {
                    <Tooltip Text="Comma separated IP address list, e.g. 10.1.1.1,10.1.2.2. For NRPT." Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>DNS Servers</FieldLabel>
                            <TextEdit @bind-Text="@svc.DnsServers" />
                        </Field>
                    </Tooltip>
                }
                <Divider DividerType="DividerType.TextContent" Text="Tunnel Settings" />
                <Field>
                    <FieldLabel>Tunnel Protocol</FieldLabel>
                    <SelectList TItem="NativeProtocolType"
                                TValue="NativeProtocolType"
                                TextField="@(t=>t.ToString())"
                                ValueField="@(t=>t)"
                                Data="@(Enum.GetValues<NativeProtocolType>())"
                                @bind-SelectedValue="@svc.TunnelProtocol" />
                </Field>
                @if (svc.TunnelProtocol == NativeProtocolType.ProtocolList)
                {
                    <Tooltip Text="Comma separated protocol list, e.g. SSTP,IKEv2,L2TP" Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>Protocol List</FieldLabel>
                            <TextEdit @bind-Text="@svc.ProtocolListString" />
                        </Field>
                    </Tooltip>
                }
                <Divider DividerType="DividerType.TextContent" Text="Authentication Settings" />
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.Tls">TLS</Switch>
                </Field>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.Peap">PEAP</Switch>
                </Field>
                @if (svc.Tls || svc.Peap)
                {
                    <Field>
                        <Switch TValue="bool" @bind-Checked="@svc.DisableServerValidationPrompt">Disable RADIUS Server Validation Prompt</Switch>
                    </Field>
                    <Field>
                        <FieldLabel>RADIUS Server Name</FieldLabel>
                        <TextEdit @bind-Text="@svc.RadiusServerName" />
                    </Field>
                    <Tooltip Text="Comma separated hash list, e.g. abcdef123456,654321fedcba." Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>RADIUS Server Root CA Hash</FieldLabel>
                            <TextEdit @bind-Text="@svc.RootCAHash" />
                        </Field>
                    </Tooltip>
                }
                <Divider DividerType="DividerType.TextContent" Text="Routing Settings" />
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.ForceTunnel">Force Tunnel</Switch>
                </Field>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.SimpleRoute">Simple Route Generation</Switch>
                </Field>
                @if (svc.SimpleRoute)
                {
                    <Tooltip Text="Comma separated subnet list, e.g. 10.1.1.0/24,10.1.2.0/24." Placement="TooltipPlacement.Right">
                        <Field>
                            @if (svc.ForceTunnel)
                            {
                                <FieldLabel>Excluded Subnets</FieldLabel>
                                <TextEdit @bind-Text="@svc.ExcludedSubnets" />
                            }
                            else
                            {
                                <FieldLabel>Domain Subnets</FieldLabel>
                                <TextEdit @bind-Text="@svc.DomainSubnets" />
                            }
                        </Field>
                    </Tooltip>
                }
            </Div>
        }
        else
        {
            <Div ElementId="dt-fields">
                <Divider DividerType="DividerType.TextContent" Text="Tunnel Settings" />
                <Field>
                    <FieldLabel>Tunnel Protocol</FieldLabel>
                    <SelectList TItem="NativeProtocolType"
                                TValue="NativeProtocolType"
                                TextField="@(t=>t.ToString())"
                                ValueField="@(t=>t)"
                                Data="@(Enum.GetValues<NativeProtocolType>())"
                                SelectedValue="NativeProtocolType.IKEv2"
                                Disabled="true" />
                </Field>
                <Divider DividerType="DividerType.TextContent" Text="Routing Settings" />
                <Field>
                    <Switch TValue="bool" Checked="false" Disabled="true">Force Tunnel</Switch>
                </Field>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.SimpleRoute">Simple Route Generation</Switch>
                </Field>
                @if (svc.SimpleRoute)
                {
                    <Tooltip Text="Comma separated IPv4 address list, e.g. 10.1.1.1,10.1.2.2." Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>Domain Controller Addresses</FieldLabel>
                            <TextEdit @bind-Text="@svc.DomainControllerAddresses" />
                        </Field>
                    </Tooltip>
                }
            </Div>
        }
        <Divider DividerType="DividerType.TextContent" Text="Details & Extra" />
        @if (svc.UserTunnel)
        {
            <Button Color="Color.Info" Clicked="ShowNrpt" Margin="Margin.Is1.OnY">NRPT</Button>
            <Button Color="Color.Info" Clicked="ShowTrafficFilters" Margin="Margin.Is1.OnY">Traffic Filters</Button>
            <Button Color="Color.Info" Clicked="ShowAppTriggers" Margin="Margin.Is1.OnY">App Triggers</Button>
            <Button Color="Color.Info" Clicked="ShowRoutes" Margin="Margin.Is1.OnY">Routes</Button>
            <Button Color="Color.Info" Clicked="ShowProxy" Margin="Margin.Is1.OnY">Proxy</Button>
            <Button Color="Color.Info" Clicked="ShowCryptographySuite" Disabled="@(svc.TunnelProtocol != NativeProtocolType.IKEv2)" Margin="Margin.Is1.OnY">IPsec Policy</Button>
            <Button Color="Color.Info" Clicked="ShowDeviceCompliance" Disabled="@(!svc.Tls)" Margin="Margin.Is1.OnY">Device Compliance</Button>
            <Button Color="Color.Info" Clicked="ShowCertificateSelection" Disabled="@(!svc.Tls)" Margin="Margin.Is1.OnY">Certificate Selection</Button>
            <Button Color="Color.Info" Clicked="ShowExtraSettings" Margin="Margin.Is1.OnY">Extra Settings</Button>
        }
        else
        {
            <Button Color="Color.Info" Clicked="ShowTrafficFilters" Margin="Margin.Is1.OnY">Traffic Filters</Button>
            <Button Color="Color.Info" Clicked="ShowAppTriggers" Margin="Margin.Is1.OnY">App Triggers</Button>
            <Button Color="Color.Info" Clicked="ShowRoutes" Margin="Margin.Is1.OnY">Routes</Button>
            <Button Color="Color.Info" Clicked="ShowCryptographySuite" Margin="Margin.Is1.OnY">IPsec Policy</Button>
            <Button Color="Color.Info" Clicked="ShowExtraSettings" Margin="Margin.Is1.OnY">Extra Settings</Button>
        }
    </SplitterSection>
    <SplitterSection Display="Display.Flex" Flex="Flex.Column" Style="height:calc(100vh - 74px - 1rem); overflow-y:scroll">
        <Button Color="Color.Primary" Clicked="@Build" Block>Build</Button>
        <Grid Columns="GridColumns.Are3" Gap="Gap.Is1">
            <Button Color="Color.Success" Margin="Margin.Is1.FromTop" Disabled="@(!built)" Clicked="@CopyToClipboard" Block>Copy XML to Clipboard</Button>
            <Button Color="Color.Success" Margin="Margin.Is1.FromTop" Disabled="@(!built)" Clicked="@Download" Block>Download XML</Button>
            <Button Color="Color.Success" Margin="Margin.Is1.FromTop" Clicked="@DownloadScript" Block>Download Deploy Script</Button>
        </Grid>
        @if (svc.Win11Profile)
        {
            <!-- Not sure why nested Blazorise.Link is not working inside if...-->
            <Alert Color="Color.Warning" Margin="Margin.Is1.FromTop.Is0.FromBottom" Display="Display.Table">
                <AlertMessage>Windows 11 ONLY</AlertMessage>
                <AlertDescription>This profile contains settings that are only valid for Windows 11 21H2+. Check <a target="_blank" style="display: contents" href="https://learn.microsoft.com/en-us/windows/client-management/mdm/vpnv2-csp">VPNv2 CSP</a> for more info.</AlertDescription>
            </Alert>
        }
        <Div Margin="Margin.Is1.OnY" Flex="Flex.Grow.Is1" Border="Border.Is1.Rounded.White">
            @if (built)
            {
                <pre class="language-xml" style="margin:0">
                    <code>@highlightedProfileXml</code>
                </pre>
            }
        </Div>
        <!--<MemoEdit @bind-Text="@svc.ProfileXml"
                  Class="monospace-fixed-textbox"
                  Style="text-wrap:nowrap"
                  Margin="Margin.Is1.OnY"
                  ReadOnly
                  Flex="Flex.Grow.Is1" />-->
    </SplitterSection>
</Splitter>

<style>
    .fui-Field {
        margin-bottom: var(--spacingHorizontalXS);
    }
</style>

@code {
    [CascadingParameter(Name = "MainLayout")]
    public MainLayout? layout { get; set; }

    bool built = false;
    VpnBuildService.PreSets set = VpnBuildService.PreSets.User_Split_PEAP__TLS;
    MarkupString highlightedProfileXml;

    protected override void OnInitialized()
    {
        if (layout != null) layout.ShowFooter = false;
        base.OnInitialized();
    }

    private async void Build()
    {
        try
        {
            svc.Build();
            built = true;
            await PrismHighlight();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            await NotificationService.Error(e.Message, "Build Failed");
        }
    }

    private Task ShowTrafficFilters()
    {
        return ModalService.Show<TrafficFilterModal>("Traffic Filters", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowAppTriggers()
    {
        return ModalService.Show<AppTriggerModal>("App Triggers", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowNrpt()
    {
        return ModalService.Show<NrptModal>("NRPT", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowRoutes()
    {
        return ModalService.Show<RouteModal>("Routes", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowCryptographySuite()
    {
        return ModalService.Show<CryptographySuiteModal>("Cryptography Suite", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowProxy()
    {
        return ModalService.Show<ProxyModal>("Proxy", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowDeviceCompliance()
    {
        return ModalService.Show<DeviceComplianceModal>("Device Compliance", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowCertificateSelection()
    {
        return ModalService.Show<CertificateSelectionModal>("Certificate Selection", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowExtraSettings()
    {
        return ModalService.Show<ExtraSettingsModal>("Extra Settings", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private async Task CopyToClipboard()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", svc.ProfileXml);
        if (message == "Success")
        {
            await NotificationService.Success("ProfileXML copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }

    private async Task Download()
    {
        var jsparams = new object[]
        {
            "VPNProfile.XML", "text/xml", svc.ProfileXml
        };
        await JSRuntime.InvokeVoidAsync("blazorFileDownload", jsparams);
    }

    private async Task DownloadScript()
    {
        var filename = svc.UserTunnel ? "VPNDeploy-User.ps1" : "VPNDeploy-Device.ps1";
        var script = await svc.GetDeployScript(httpClient);
        var jsparams = new object[]
        {
            filename, "text/plain", script
        };
        await JSRuntime.InvokeVoidAsync("blazorFileDownload", jsparams);
    }

    private async Task PrismHighlight()
    {
        highlightedProfileXml = new MarkupString(await JSRuntime.InvokeAsync<string>("prismHighlightXml", svc.ProfileXml));
    }

    private void LoadPreSet()
    {
        svc.LoadPreSet(set);
        Build();
    }
}
