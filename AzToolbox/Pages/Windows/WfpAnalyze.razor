@page "/WfpAnalyze"
@page "/Windows/WfpAnalyze"
<PageTitle>WFP Trace Analyze - AzToolbox</PageTitle>

@using WFPXML;
@using WFPXML.Model;
@using AzToolbox.Components.WfpAnalyze;

@inject ILoadingIndicatorService ApplicationLoadingIndicatorService
@inject INotificationService NotificationService

@if (!ShowResult)
{
    @if (ResultReady)
    {
        <Button Clicked="@(()=>ShowResult = true)" Color="Color.Primary"><Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.ArrowRedoFilled" IconSize="IconSize.Large" /> Back to last result</Button>
    }
    <Card Width="Width.Is75" Margin="Margin.IsAuto">
        <CardBody>
            <FilePicker Upload="OnFileSelected" Changed="OnFileChanged" Filter=".xml" @ref="filePickerCustom">
                <FileTemplate>
                    <Div Flex="Flex.JustifyContent.Between">
                        <Div>
                            <Heading Size="HeadingSize.Is5">@context.File.Name</Heading>
                            <Paragraph>@($"Size: {(context.File.Size / 1048576.0):0.##}MB")</Paragraph>
                        </Div>
                        <Div>
                            <Button Clicked="@(()=>filePickerCustom.UploadFile(context.File))" Color="Color.Primary">Read & Analayze</Button>
                        </Div>
                    </Div>
                    <Divider />
                    <Progress Value="@filePickerCustom.GetProgressPercentage()" />
                </FileTemplate>
                <ButtonsTemplate />
            </FilePicker>

            <Alert Color="Color.Primary" Visible="true" Margin="Margin.Is1.OnY">
                <AlertMessage>
                    <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.InfoFilled" IconSize="IconSize.Large" /> Supported Traces <br>
                </AlertMessage>
                <AlertDescription>
                    wfpdiag.xml - netsh wfp capture start/stop <br>
                    wfpstate.xml - netsh wfp show state <br>
                    netEvents.xml - netsh wfp show netevents <br>
                </AlertDescription>
                <AlertMessage>
                    <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.InfoFilled" IconSize="IconSize.Large" /> File Size Limit <br>
                </AlertMessage>
                <AlertDescription>
                    100MB
                </AlertDescription>
            </Alert>
        </CardBody>
    </Card>
}
else
{
    <Button Clicked="@(()=>ShowResult = false)" Color="Color.Primary"><Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.ArrowResetFilled" IconSize="IconSize.Large" /> Select Another File</Button>
    @resultFragment
}

@code {
    bool ShowResult = false;
    bool ResultReady = false;
    FilePicker filePickerCustom = new();
    RenderFragment? resultFragment;

    void OnFileChanged(FileChangedEventArgs e)
    {
    }

    async Task OnFileSelected(FileUploadEventArgs e)
    {
        await ApplicationLoadingIndicatorService.Show();

        var file = e.File;
        var fileStream = file.OpenReadStream(104857600);
        try
        {
            var result = await WFPXML.Reader.ReadAsync(fileStream);
            resultFragment =@<WfpXmlTabView WFPXMLResult="@result" />; 
        }
        catch (Exception ex)
        {
            await NotificationService.Error(ex.Message);
            resultFragment = @<Heading Size="HeadingSize.Is5">@ex.GetType().ToString()</Heading>;
            resultFragment += @<Paragraph>@ex.Message</Paragraph>;
        }
        ResultReady = true;
        ShowResult = true;

        await ApplicationLoadingIndicatorService.Hide();
        await InvokeAsync(StateHasChanged);
    }
}
