@page "/Windows/SecDescriptor"
<PageTitle>Security Descriptor Tool - AzToolbox</PageTitle>

@using AzToolbox.Models
@using AzToolbox.Models.SecDescriptor
@using AzToolbox.Components.SecDescriptor
@using WinSdUtil.Model

@inject WinSdService wsdsvc
@inject INotificationService NotificationService
@inject IModalService ModalService
@inject IJSRuntime JSRuntime

<Card Width="Width.Is75" Margin="Margin.IsAuto">
    <CardBody>
        <Field Flex="Flex.InlineFlex.AlignItems.Center" Margin="Margin.Is1.OnY">
            <FieldLabel>Input Type</FieldLabel>
            <Switch @bind-Checked="SddlOrBinary">@currentType</Switch>
        </Field>
        <Field Margin="Margin.Is1.OnY">
            @if (SddlOrBinary)
            {
                <FieldLabel>SDDL</FieldLabel>
                <MemoEdit Rows="5" AutoSize spellcheck="false" Class="monospace-fixed-textbox" @bind-Text="sddl" />
            }
            else
            {
                <FieldLabel>HEX String of Binary SD</FieldLabel>
                <MemoEdit Rows="5" AutoSize spellcheck="false" Class="monospace-fixed-textbox" @bind-Text="binarystr" />
            }
        </Field>
        <Field Margin="Margin.Is1.OnY">
            <FieldLabel>Access Mask Type</FieldLabel>
            <SelectList TItem="AccessMaskType"
                        TValue="AccessMaskType"
                        Data="Enum.GetValues<AccessMaskType>()"
                        TextField="@(item => item.ToString())"
                        ValueField="@(item => item)"
                        @bind-SelectedValue="@SelectedAccessMaskType" />
        </Field>
        <Divider DividerType="DividerType.Solid" />
        <Button Color="Color.Primary" Clicked="Parse" Block>Parse</Button>
        <Divider DividerType="DividerType.Solid" />
        <Div Display="Display.Flex" Margin="Margin.Is1.FromTop">
            <Button Color="Color.Primary" Clicked="() => AclTree.ExpandAll()" Size="Size.Small">Expand All</Button>
            <Button Color="Color.Primary" Clicked="CopyTreeView" Size="Size.Small" Margin="Margin.Is1.FromStart">Copy Tree</Button>
            <Button Color="Color.Info" Clicked="ShowTrusteeOverview" Size="Size.Small" Margin="Margin.Is1.FromStart">Trustee List</Button>
            <Button Color="Color.Info" Clicked="ShowAccessMaskDetails" Size="Size.Small" Margin="Margin.Is1.FromStart">Access Mask List</Button>
            <Button Color="@(matchedAccessMaskOnly ? Color.Success : Color.Info)"
                    Clicked="() => {matchedAccessMaskOnly = !matchedAccessMaskOnly; AclTree.UpdateTreeView(matchedAccessMaskOnly);}"
                    Size="Size.Small" Margin="Margin.Is1.FromStart">
                @(matchedAccessMaskOnly ? "Show All" : "Show Matched Only")
            </Button>
        </Div>
        <TreeView @ref="@AclTree"
                  Nodes="AclTreeHead"
                  ExpandedNodes="ExpandedNodes"
                  GetChildNodes="@(item => item.Children)"
                  HasChildNodes="@(item => item.HasChildren)">
            <NodeContent>
                <Text TextWeight="TextWeight.Bold" Class="monospace-text">@(context.Label):</Text>
                <Text Padding="Padding.Is1.FromStart" Class="monospace-text">@context.Description</Text>
                @if (context.Label == "SID")
                {
                    <Button Size="Size.Small" Style="padding: 0; border:none" Clicked="()=>ShowTrusteeDetails((Trustee)context.Tag!)"><Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.InfoFilled" /></Button>
                }
            </NodeContent>
        </TreeView>
    </CardBody>
</Card>

@code {
    TreeView<TreeViewItem> AclTree = null!;
    IEnumerable<TreeViewItem> AclTreeHead = null!;
    List<TreeViewItem> ExpandedNodes = new();

    bool SddlOrBinary = true;
    bool matchedAccessMaskOnly = false;
    string sddl = string.Empty;
    string binarystr = string.Empty;
    string currentType => SddlOrBinary ? "SDDL" : "Binary";
    AccessMaskType selectedAccessMaskType = AccessMaskType.File;
    AccessMaskType SelectedAccessMaskType
    {
        get => selectedAccessMaskType;
        set
        {
            selectedAccessMaskType = value;
            AclTree.UpdateTreeView(selectedAccessMaskType);
        }
    }
    AccessControlList aclResult = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!wsdsvc.IsInitialized)
            await wsdsvc.InitializeAsync();
    }

    async Task Parse()
    {
        try
        {
            if (SddlOrBinary)
            {
                aclResult = wsdsvc.FromSddlToAcl(sddl);
            }
            else
            {
                aclResult = wsdsvc.FromBinaryToAcl(binarystr);
            }
            ExpandedNodes.Clear();
            AclTreeHead = new TreeViewItem[] { aclResult.ToTreeView(SelectedAccessMaskType, matchedAccessMaskOnly) };
            ExpandedNodes.Add(AclTreeHead.First());
        }
        catch (Exception ex)
        {
            await NotificationService.Error(ex.Message);
        }
    }

    async Task CopyTreeView()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", AclTreeHead.First().ToString());
        if (message == "Success")
        {
            await NotificationService.Success("ACL tree copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }

    Task ShowAccessMaskDetails()
    {
        return ModalService.Show<AccessMaskDetailsModal>("Access Mask", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    Task ShowTrusteeDetails(Trustee trustee)
    {
        return ModalService.Show<TrusteeDetailsModal>("Trustee", x => x.Add(x => x.trustee, trustee),
        new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    Task ShowTrusteeOverview()
    {
        return ModalService.Show<TrusteeOverviewModal>("Trustee Overview",
        new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }
}
