@page "/Windows/SecDescriptor"
<PageTitle>Security Descriptor Tool - AzToolbox</PageTitle>

@using AzToolbox.Models
@using WinSdUtil.Lib.Model
@inject WinSdService wsdsvc
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

<Card Width="Width.Is75" Margin="Margin.IsAuto">
    <CardBody>
        <Addons Flex="Flex.InlineFlex.AlignItems.Center" Margin="Margin.Is2.OnY">
            <Addon AddonType="AddonType.Start" Margin="Margin.Is1.FromEnd">
                <AddonLabel>Input Type</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Switch @bind-Checked="SddlOrBinary">@currentType</Switch>
            </Addon>
        </Addons>
        @if (SddlOrBinary)
        {
            <MemoEdit Rows="5" AutoSize Class="monospace-fixed-textbox" Placeholder="SDDL" @bind-Text="sddl" />
        }
        else
        {
            <MemoEdit Rows="5" AutoSize Class="monospace-fixed-textbox" Placeholder="HEX String of Binary SD" @bind-Text="binarystr" />
        }
        <Addons Margin="Margin.Is2.OnY">
            <Addon AddonType="AddonType.Start">
                <AddonLabel>Access Mask Type</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <SelectList TItem="AccessMaskType"
                            TValue="AccessMaskType"
                            Data="Enum.GetValues<AccessMaskType>()"
                            TextField="@(item => item.ToString())"
                            ValueField="@(item => item)"
                @bind-SelectedValue="@selectedAccessMaskType" />
            </Addon>
        </Addons>
        <Divider DividerType="DividerType.Solid" />
        <Button Color="Color.Primary" Clicked="Parse" Block>Parse</Button>
        <Divider DividerType="DividerType.Solid" />
        <Button Color="Color.Primary" Clicked="() => AclTree.ExpandAll()" Size="Size.Small">Expand All</Button>
        <Button Color="Color.Primary" Clicked="CopyTreeView" Size="Size.Small">Copy Tree</Button>
        <TreeView @ref="@AclTree"
                  Nodes="AclTreeHead"
                  GetChildNodes="@(item => item.Children)"
                  HasChildNodes="@(item => item.HasChildren)">
            <NodeContent>
                <Text TextWeight="TextWeight.Bold" Class="monospace-text">@(context.Label):</Text>
                <Text Padding="Padding.Is1.FromStart" Class="monospace-text">@context.Description</Text>
            </NodeContent>
        </TreeView>
    </CardBody>
</Card>

@code {
    TreeView<TreeViewItem> AclTree = null!;
    IEnumerable<TreeViewItem> AclTreeHead = null!;

    bool SddlOrBinary = true;
    string sddl = string.Empty;
    string binarystr = string.Empty;
    string currentType => SddlOrBinary ? "SDDL" : "Binary";
    AccessMaskType selectedAccessMaskType = AccessMaskType.File;

    protected override async Task OnInitializedAsync()
    {
        if (!wsdsvc.IsInitialized)
            await wsdsvc.InitializeAsync();
    }

    async Task Parse()
    {
        try
        {
            if(SddlOrBinary)
            {
                AclTreeHead = new TreeViewItem[] { wsdsvc.FromSddlToAcl(sddl, selectedAccessMaskType) };
            }
            else
            {
                AclTreeHead = new TreeViewItem[] { wsdsvc.FromBinaryToAcl(binarystr, selectedAccessMaskType) };
            }
        }
        catch (Exception ex)
        {
            await NotificationService.Error(ex.Message);
        }
    }

    async Task CopyTreeView()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", AclTreeHead.First().ToString());
        if (message == "Success")
        {
            await NotificationService.Success("ProfileXML copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }
}
