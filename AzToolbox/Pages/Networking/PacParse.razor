@page "/Networking/PacParse"
<PageTitle>PAC Parse - AzToolbox</PageTitle>

@inject KzA.Blazor.PacParser.PacParserService pacsvc
@inject INotificationService NotificationService

@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages

<Row>
    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is12.OnMobile">
        <Div Position="Blazorise.Position.Sticky.Top.Is0">
            <Alert Color="Color.Info" @bind-Visible="@showAlert" Margin="Margin.Is2.FromTop">
                <AlertMessage>Attention!</AlertMessage>
                <CloseButton /><br>
                <AlertDescription>* DNS resolution is done with CloudFlare DNS over HTTPS API. If there is any private DNS name, upload a hosts file, otherwise it won't be resolved.</AlertDescription><br>
                <AlertDescription>* Does NOT support IPv6 or Windows extended PAC function (Ex functions).</AlertDescription>
            </Alert>
            <Field>
                <FieldLabel>PAC</FieldLabel>
                <StandaloneCodeEditor @ref="_editor" ConstructionOptions=" EditorConstructionOptions" Id="pac-editor" />
            </Field>
            <Field>
                <FieldLabel>URL</FieldLabel>
                <TextEdit @bind-Text="@url"></TextEdit>
            </Field>
            <Field>
                <FieldLabel>Host</FieldLabel>
                <TextEdit Text="@CrackHost()" ReadOnly></TextEdit>
            </Field>
            <Field>
                <FieldLabel>My IP Address</FieldLabel>
                <TextEdit @bind-Text="@myip"></TextEdit>
            </Field>
            <Tooltip Text="A standard hosts file for private hosts that cannot be resolved by public DNS server" Placement="TooltipPlacement.Right">
            <Field>
                <FieldLabel>Hosts File</FieldLabel>
                <FileEdit Changed="@HostsUpload" AutoReset="false" />
            </Field>
            </Tooltip>
            <Button Color="Color.Primary" Clicked="Parse" Block>Parse</Button>
        </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is7.OnDesktop.Is12.OnMobile">
        <MemoEdit Text="@pacsvc.DebugOutput" ReadOnly Class="monospace-fixed-textbox" Placeholder="Debug Info"></MemoEdit>
        <MemoEdit Text="@pacsvc.JsConsole" ReadOnly Margin="Margin.Is2.FromTop" Class="monospace-fixed-textbox" Placeholder="JS Console"></MemoEdit>
    </Column>
</Row>

<style>
    .fui-Textarea {
        height: 40vh !important;
    }

    #pac-editor{
        height: 50vh;
        min-height: 200px;
    }
</style>

@code {
    const string paccontent =
        @"function FindProxyForURL(url, host) {
    var direct = ""DIRECT"";
    var proxy = ""PROXY myproxy.contoso.com"";
    host = host.toLowerCase();
    var hostdns = dnsResolve(host);

    if (shExpMatch(host, ""*.example.com"")) {
        return proxy;
    }

    return direct;
}";
    string url = "http://www.example.com/";
    string host = "www.example.com";
    string myip = "127.0.0.1";
    string[]? hosts;
    bool showAlert = true;
    StandaloneCodeEditor? _editor;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "javascript",
                Value = paccontent,
                Minimap = new()
                {
                    Enabled = false
                },
            };
    }

    async void Parse()
    {
        System.Net.IPAddress? myIpAddr;
        if (!System.Net.IPAddress.TryParse(myip, out myIpAddr) || myIpAddr == null || myIpAddr.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
        {
            await NotificationService.Error("Invalid IP address");
            return;
        }
        try
        {
            var pac = await _editor!.GetValue();
            pacsvc.Parse(pac, url, host, myIpAddr, hosts);
        }
        catch
        {
            await NotificationService.Error("Bad PAC, check syntax.");
            return;
        }
        StateHasChanged();
    }

    string CrackHost()
    {
        var match = System.Text.RegularExpressions.Regex.Match(url, @"(http://|https://|ftp://)([^/\.]+(\.[^/\.]+)*)(/[^/]+)*");
        if (match.Success)
        {
            host = match.Groups[2].Value;
        }
        return host;
    }

    async Task HostsUpload(FileChangedEventArgs e)
    {
        try
        {
            var file = e.Files.FirstOrDefault();
            if (file == null)
            {
                return;
            }
            if (file.Size > 1024 * 1024)
            {
                await NotificationService.Error("File too large");
                return;
            }
            using var fs = file.OpenReadStream(1024 * 1024);
            using var sr = new System.IO.StreamReader(fs);
            var content = await sr.ReadToEndAsync();
            hosts = content.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);
        }
        catch (Exception ex)
        {
            await NotificationService.Error(ex.Message);
        }
    }
}
