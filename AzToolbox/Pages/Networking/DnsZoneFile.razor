@page "/Networking/DnsZoneFile"

@using AzToolbox.Components.DnsZoneFile;
@using KzA.DNS.ResourceRecord
@using KzA.DNS.Zone
@using System.Net

@inject DnsZoneFileService svc
@inject IModalService ModalService
@inject IMessageService MessageService

<PageTitle>DNS Zone File Builder - AzToolbox</PageTitle>

@if (!done)
{
    <Button Clicked="()=>done = !done">Show Result</Button>
    <Row>
        <Column>
            <Field>
                <FieldLabel>Zone Name</FieldLabel>
                <TextEdit @bind-Text="@svc.Name" />
            </Field>
            <Field>
                <FieldLabel>Primary Server</FieldLabel>
                <TextEdit @bind-Text="@svc.SOA.MNAME" />
            </Field>
            <Field>
                <FieldLabel>Responsible Person</FieldLabel>
                <TextEdit @bind-Text="@svc.SOA.RNAME" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Serial Number</FieldLabel>
                <NumericEdit @bind-Value="@svc.SOA.SERIAL" />
            </Field>
            <Field>
                <FieldLabel>Refresh Interval</FieldLabel>
                <NumericEdit @bind-Value="@svc.SOA.REFRESH" />
            </Field>
            <Field>
                <FieldLabel>Retry Interval</FieldLabel>
                <NumericEdit @bind-Value="@svc.SOA.RETRY" />
            </Field>
        </Column>
        <Column>
            <Field>
                <FieldLabel>Expires After</FieldLabel>
                <NumericEdit @bind-Value="@svc.SOA.EXPIRE" />
            </Field>
            <Field>
                <FieldLabel>Minimum/Default TTL</FieldLabel>
                <NumericEdit @bind-Value="@svc.SOA.MINIMUM" />
            </Field>
            <Field>
                <FieldLabel>SOA TTL</FieldLabel>
                <NumericEdit @bind-Value="@svc.SOA.TTL" />
            </Field>
        </Column>
    </Row>
    <Div Flex="Flex.Row.JustifyContent.Between">
        <Div>
            <Button Clicked="@NewRecord" Color="Color.Primary" Margin="Margin.Is1.FromEnd"><Icon Name="IconName.Add" IconSize="IconSize.Large" />Add Record</Button>
            <Button Clicked="@ClearRecords" Color="Color.Danger" Margin="Margin.Is1.FromEnd"><Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.DeleteFilled" IconSize="IconSize.Large" />Clear Records</Button>
            <Button Clicked="@ClearAll" Color="Color.Danger" Margin="Margin.Is1.FromEnd"><Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.DeleteFilled" IconSize="IconSize.Large" />Clear All</Button>
        </Div>
        <Switch @bind-Checked="suppressDeleteWarning">No Confirmation on Deletion</Switch>
    </Div>
    <DataGrid TItem="IRecord"
              Data="@svc.ViewRecords"
              @bind-SelectedRow="selectedRecord"
              Editable="true"
              Filterable="true" FilterMode="DataGridFilterMode.Menu"
              Narrow="true"
              ShowPager="true" ShowPageSizes="true"
              PageSize="100" PageSizes="@([50, 100, 200, 500])"
              Groupable="true" ShowGrouping="true"
              Bordered="true"
              Resizable="true" ResizeMode="TableResizeMode.Header"
              Style="font-size:small">
        <DataGridColumns>
            <DataGridCommandColumn CancelCommandAllowed="false"
                                   NewCommandAllowed="false"
                                   SaveCommandAllowed="false"
                                   FixedPosition="TableColumnFixedPosition.Start"
                                   TextAlignment="TextAlignment.Start">
                <EditCommandTemplate>
                    <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.EditFilled" IconSize="IconSize.Large" Clicked="@(() => EditRecord(context.Item))" TextColor="TextColor.Primary" />
                    <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.CopyFilled" IconSize="IconSize.Large" Clicked="@(() => DupRecord(context.Item))" TextColor="TextColor.Primary" />
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.DismissCircleFilled" IconSize="IconSize.Large" Clicked="@(() => DeleteRecord(context.Item))" TextColor="TextColor.Danger" />
                </DeleteCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn Field="@nameof(IRecord.Name)" Caption="Name" Sortable="true" Editable="true" />
            <DataGridColumn Field="@nameof(IRecord.Type)" Caption="Type" Sortable="true" Groupable="true" />
            <DataGridColumn Field="@nameof(IRecord.TTL)" Caption="TTL" Sortable="true" Editable="true" />
            <DataGridColumn Field="@nameof(IRecord.Data)" Caption="Data" Sortable="false">
                <DisplayTemplate>
                    @context
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
}
else
{
    <Button Clicked="()=>done = !done" Margin="Margin.Is1.FromBottom">Go Back</Button>
    <MemoEdit Text="@svc.GenerateFile()" ReadOnly Class="monospace-fixed-textbox" />
}

<style>
    .fui-Textarea {
        height: calc(100% - 40px)
    }
</style>

@code {
    private IRecord? selectedRecord;
    private bool suppressDeleteWarning = false;
    private bool done = false;

    private async Task NewRecord()
    {
        var opt = new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            };
        var modal = await ModalService.Show<RecordAddModal>("New Record", opt);
    }

    private async Task ClearRecords()
    {
        if (await MessageService.Confirm("Are you sure to remove all records?", "Confirmation"))
        {
            svc.ClearRecords();
        }
    }

    private async Task ClearAll()
    {
        if (await MessageService.Confirm("Are you sure to reset everything?", "Confirmation"))
        {
            svc.ClearAll();
        }
    }

    private async Task EditRecord(IRecord record)
    {
        var opt = new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge,
            };
        var modal = await ModalService.Show<RecordEditModal>("Edit Record", x => x.Add(x => x.Record, record), opt);
    }

    private void DupRecord(IRecord record)
    {
        var newRecord = record.Clone() as IRecord;
        svc.ViewRecords.Add(newRecord!);
    }

    private async Task DeleteRecord(IRecord record)
    {
        if (suppressDeleteWarning || await MessageService.Confirm("Are you sure to remove the record?", "Confirmation"))
        {
            svc.ViewRecords.Remove(record);
        }
    }
}
