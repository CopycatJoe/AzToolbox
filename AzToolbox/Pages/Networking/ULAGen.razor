@page "/Networking/ULAGen"
<PageTitle>ULA Generator - AzToolbox</PageTitle>

@using System.Net;
@using System.Text;

<Card Width="Width.Is75" Margin="Margin.IsAuto">
    <CardBody>
        <Addons Flex="Flex.InlineFlex.AlignItems.Center" Margin="Margin.Is2.FromTop">
            <Addon AddonType="AddonType.Start" Margin="Margin.Is1.FromEnd">
                <AddonLabel Style="min-width: 300px">L bit</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Switch @bind-Checked="Lbit">@(Lbit ? 1 : 0)</Switch>
            </Addon>
        </Addons>
        <Addons Flex="Flex.InlineFlex.AlignItems.Center" Margin="Margin.Is2.FromTop">
            <Addon AddonType="AddonType.Start" Margin="Margin.Is1.FromEnd">
                <AddonLabel Style="min-width: 300px">Subnet ID (0-65535)</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <NumericPicker TValue="ushort" @bind-Value="@SubnetId" Min="0" Max="65535" />
            </Addon>
        </Addons>
        <Addons Flex="Flex.InlineFlex.AlignItems.Center" Margin="Margin.Is2.FromTop">
            <Addon AddonType="AddonType.Start" Margin="Margin.Is1.FromEnd">
                <AddonLabel Style="min-width: 300px">Random Prefix</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Button Color="Color.Primary" Clicked="Generate">Generate</Button>
            </Addon>
        </Addons>
         <Divider />
         <Table FixedColumns Bordered Margin="Margin.Is2.OnX">
             <TableHeader>
                 <TableRow>
                     <TableHeaderCell Width="@Width.Em(7)">Prefix</TableHeaderCell>
                     <TableHeaderCell Width="@Width.Em(3)">Subnet</TableHeaderCell>
                     <TableHeaderCell Width="@Width.Em(3)">Interface</TableHeaderCell>
                     <TableHeaderCell Width="@Width.Em(10)">Network ID</TableHeaderCell>
                 </TableRow>
             </TableHeader>
             <TableBody>
                 <TableRow>
                     <TableRowCell Width="@Width.Em(7)">
                         <Div Class="addr-item">
                             @prefixDisplay
                        </Div>
                    </TableRowCell>
                    <TableRowCell Width="@Width.Em(3)">
                        <Div Class="addr-item">
                            @subnetIdDisplay
                        </Div>
                    </TableRowCell>
                    <TableRowCell Width="@Width.Em(3)">
                        <Div Class="addr-item">
                            ::
                        </Div>
                    </TableRowCell>
                    <TableRowCell Width="@Width.Em(10)">
                        <Div Class="addr-item">
                            @(addr.ToString() + "/64")
                        </Div>
                    </TableRowCell>
                </TableRow>
            </TableBody>
        </Table>
    </CardBody>
</Card>


<style>
    .addr-item {
        font-family: FiraCode, 'Cascadia Code', Consolas, monospace;
        font-size: 1.75em;
    }
</style>

@code {
    bool lbit = true;
    bool Lbit
    {
        get => lbit;
        set
        {
            lbit = value;
            if (lbit)
                rawAddr[0] |= 1;
            else
                rawAddr[0] &= 0xfe;
            addr = new(rawAddr);
        }
    }

    ushort subnetId = 0;
    ushort SubnetId
    {
        get => subnetId;
        set
        {
            subnetId = value;
            var subnet = BitConverter.GetBytes(subnetId);
            Array.Reverse(subnet);
            for (var i = 6; i < 8; ++i)
            {
                rawAddr[i] = subnet[i - 6];
            }
            addr = new(rawAddr);
        }
    }

    byte[] rawAddr = [0xfd, 0, 0, 0,
                         0, 0, 0, 0,
                         0, 0, 0, 0,
                         0, 0, 0, 0];
    IPAddress addr;  // Used for IPv6 address compressing

    string prefixDisplay
    {
        get
        {
            var sb = new StringBuilder();
            sb.Append($"{rawAddr[0]:x2}");
            sb.Append($"{rawAddr[1]:x2}");
            sb.Append(":");
            sb.Append($"{rawAddr[2]:x2}");
            sb.Append($"{rawAddr[3]:x2}");
            sb.Append(":");
            sb.Append($"{rawAddr[4]:x2}");
            sb.Append($"{rawAddr[5]:x2}");
            return sb.ToString();
        }
    }

    string subnetIdDisplay
    {
        get
        {
            var sb = new StringBuilder();
            sb.Append($"{rawAddr[6]:x2}");
            sb.Append($"{rawAddr[7]:x2}");
            return sb.ToString();
        }
    }

    public ULAGen()
    {
        addr = new(rawAddr);
    }

    private byte[] GenerateBytes()
    {
        var buf = new byte[5];
        var rnd = new Random((int)DateTimeOffset.Now.ToUnixTimeSeconds());
        rnd.NextBytes(buf);
        return buf;
    }

    private void Generate()
    {
        var prefix = GenerateBytes();
        var i = 1;
        for (; i < 6; ++i)
        {
            rawAddr[i] = prefix[i - 1];
        }
        addr = new(rawAddr);
    }
}
