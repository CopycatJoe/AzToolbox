@page "/Common/RngUtils"
<PageTitle>Random Generator - AzToolbox</PageTitle>

@using System.Security.Cryptography

<Row>
    <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is12.OnMobile">
        <Div Position="Position.Sticky.Top.Is0" Style="font-size:small">
            <Fields>
                <Field ColumnSize="ColumnSize.Is6">
                    <FieldLabel>Generate Item Count</FieldLabel>
                    <NumericEdit @bind-Value="cnt" Min="1"/>
                </Field>
                <Field ColumnSize="ColumnSize.Is6">
                    <FieldLabel>Item Type</FieldLabel>
                    <Select TValue="int" @bind-SelectedValue="@itemType">
                        <SelectItem Value="1">Integers</SelectItem>
                        <SelectItem Value="2">Decimals</SelectItem>
                        <SelectItem Value="3">Roman alphabet characters</SelectItem>
                        <SelectItem Value="4">Alphanumeric characters</SelectItem>
                        <SelectItem Value="5">ASCII characters</SelectItem>
                        <SelectItem Value="501">Characters from custom characters</SelectItem>
                        <SelectItem Value="6">Roman alphabet strings</SelectItem>
                        <SelectItem Value="7">Alphanumeric strings</SelectItem>
                        <SelectItem Value="8">ASCII strings</SelectItem>
                        <SelectItem Value="801">Strings from custom characters</SelectItem>
                        <SelectItem Value="9">HEX values</SelectItem>
                        <SelectItem Value="10">GUID</SelectItem>
                    </Select>
                </Field>
            </Fields>

            @if (itemType == 1)
            {
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Minimal Value</FieldLabel>
                        <NumericPicker @bind-Value="@min" Min="@int.MinValue" Max="@int.MaxValue" Decimals="0" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Maximum Value</FieldLabel>
                        <NumericPicker @bind-Value="@max" Min="@min" Max="@int.MaxValue" Decimals="0" />
                    </Field>
                </Fields>
            }

            @if (itemType == 2)
            {
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Minimal Value</FieldLabel>
                        <NumericPicker @bind-Value="@min" Min="@int.MinValue" Max="@int.MaxValue" Decimals="@digits" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Maximum Value</FieldLabel>
                        <NumericPicker @bind-Value="@max" Min="@min" Max="@int.MaxValue" Decimals="@digits" />
                    </Field>
                </Fields>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Digits</FieldLabel>
                        <NumericEdit @bind-Value="@digits" Min="0" Max="9" />
                    </Field>
                </Fields>
            }

            @if (itemType < 9 && itemType > 5 || itemType == 801)
            {
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Minimal String Length</FieldLabel>
                        <NumericEdit @bind-Value="@min" Min="1" Max="@int.MaxValue" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>Maximum String Length</FieldLabel>
                        <NumericEdit @bind-Value="@max" Min="@min" Max="@int.MaxValue" />
                    </Field>
                </Fields>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>String Prefix</FieldLabel>
                        <TextEdit @bind-Text="@strPrefix" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6">
                        <FieldLabel>String Suffix</FieldLabel>
                        <TextEdit @bind-Text="@strSuffix" />
                    </Field>
                </Fields>
            }

            @if (itemType > 100)
            {
                <Fields>
                    <Field ColumnSize="ColumnSize.Is12">
                        <FieldLabel>Custom Characters</FieldLabel>
                        <TextEdit @bind-Text="@custom" />
                    </Field>
                </Fields>
            }

            @if (itemType < 6 || itemType == 501)
            {
                <Fields>
                    <Field ColumnSize="ColumnSize.Is12">
                        <FieldLabel>Non-Repeat</FieldLabel>
                        <Switch TValue="bool" @bind-Checked="@nonrepeat" />
                    </Field>
                </Fields>
            }

            <Button Color="Color.Primary" Block Clicked="Generate">Go</Button>
        </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is8.OnDesktop.Is12.OnMobile">

        @if (itemType < 3)
        {
            <Card Class="rng-container-block">
                <Repeater Items="@nums">
                    <Card Class="rng-item">
                        @context
                    </Card>
                </Repeater>
            </Card>
        }

        @if (itemType < 5 && itemType > 2)
        {
            <Card Class="rng-container-block">
                <Repeater Items="@strs">
                    <Card Class="rng-item">
                        @context
                    </Card>
                </Repeater>
            </Card>
        }

        @if (itemType == 5 || itemType == 501)
        {
            <Card Class="rng-container-block">
                <Repeater Items="@mstrs">
                    <Card Class="rng-item">
                        @context
                    </Card>
                </Repeater>
            </Card>
        }

        @if (itemType < 8 && itemType > 5)
        {
            <Card Class="rng-container-line">
                <Repeater Items="@strs">
                    <Card Class="rng-item-line">
                        @context
                    </Card>
                </Repeater>
            </Card>
        }

        @if (itemType == 8 || itemType == 801)
        {
            <Card Class="rng-container-line">
                <Repeater Items="@mstrs">
                    <Card Class="rng-item-line">
                        @context
                    </Card>
                </Repeater>
            </Card>
        }

        @if (itemType == 9)
        {
            <Card Class="rng-container-block">
                <Repeater Items="@bytes">
                    <Card Class="rng-item">
                        @context.ToString("X2")
                    </Card>
                </Repeater>
            </Card>
        }

        @if (itemType == 10)
        {
            <Card Class="rng-container-line">
                <Repeater Items="@guids">
                    <Card Class="rng-item-line">
                        @context.ToString()
                    </Card>
                </Repeater>
            </Card>
        }
    </Column>
</Row>

<style>
    .rng-container-block {
        flex-flow: row;
        flex-wrap: wrap;
    }

    .rng-container-line {
        flex-flow: column;
    }

    .rng-item {
        font-family: FiraCode, 'Cascadia Code', Consolas, monospace;
        font-size: 2em;
        align-self: start;
        padding: 0 14px;
        margin: 7px 7px;
    }

    .rng-item-line {
        font-family: FiraCode, 'Cascadia Code', Consolas, monospace;
        font-size: 2em;
        align-self: start;
        padding: 0 14px;
        margin: 7px 7px;
        width: calc(100% - 14px);
    }
</style>

@code {
    int cnt = 7;
    double max = 50;
    double min = 1;
    string strPrefix = string.Empty;
    string strSuffix = string.Empty;
    int itemType = 1;
    int digits = 2;
    bool nonrepeat = false;

    List<double> nums = new();
    List<string> strs = new();
    List<MarkupString> mstrs = new();
    List<byte> bytes = new();
    List<Guid> guids = new();

    const string romanAlphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const string alphanumeric = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    const string ascii = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 !\"#$%'()*+,-./:;<=>?`@[]\\~^_{}|";
    string custom = alphanumeric;

    void Generate()
    {
        if (nonrepeat)
        {
            GenerateNonRepeat();
            return;
        }
        if (max < min) max = min;
        var seed = RandomNumberGenerator.GetInt32(int.MinValue, int.MaxValue);
        var rnd = new Random(seed);
        var _cnt = cnt;
        Int64 int64Min;
        Int64 int64Max;
        Int64 int64StrMin;
        Int64 int64StrMax;
        switch (itemType)
        {
            case 1:
                int64Min = (Int64)min;
                int64Max = (Int64)max;
                nums.Clear();
                while (_cnt > 0)
                {
                    nums.Add(rnd.NextInt64(int64Min, int64Max + 1));
                    _cnt--;
                }
                break;
            case 2:
                int64Min = (Int64)(min * Math.Pow(10, digits));
                int64Max = (Int64)(max * Math.Pow(10, digits));
                nums.Clear();
                while (_cnt > 0)
                {
                    nums.Add(rnd.NextInt64(int64Min, int64Max) / Math.Pow(10, digits));
                    _cnt--;
                }
                break;
            case 3:
                int64Min = 0;
                int64Max = romanAlphabet.Length;
                strs.Clear();
                while (_cnt > 0)
                {
                    var idx = (int)rnd.NextInt64(int64Min, int64Max);
                    strs.Add(romanAlphabet[idx].ToString());
                    _cnt--;
                }
                break;
            case 4:
                int64Min = 0;
                int64Max = alphanumeric.Length;
                strs.Clear();
                while (_cnt > 0)
                {
                    var idx = (int)rnd.NextInt64(int64Min, int64Max);
                    strs.Add(alphanumeric[idx].ToString());
                    _cnt--;
                }
                break;
            case 5:
                int64Min = 0;
                int64Max = ascii.Length;
                mstrs.Clear();
                while (_cnt > 0)
                {
                    var idx = (int)rnd.NextInt64(int64Min, int64Max);
                    var mstr = new MarkupString(AsciiEscape(ascii[idx]));
                    mstrs.Add(mstr);
                    _cnt--;
                }
                break;
            case 501:
                int64Min = 0;
                int64Max = custom.Length;
                mstrs.Clear();
                while (_cnt > 0)
                {
                    var idx = (int)rnd.NextInt64(int64Min, int64Max);
                    var mstr = new MarkupString(AsciiEscape(custom[idx]));
                    mstrs.Add(mstr);
                    _cnt--;
                }
                break;
            case 6:
                int64StrMin = (Int64)min;
                int64StrMax = (Int64)max;
                int64Min = 0;
                int64Max = romanAlphabet.Length;
                strs.Clear();
                while (_cnt > 0)
                {
                    var strLen = rnd.NextInt64(int64StrMin, int64StrMax + 1);
                    var sb = new System.Text.StringBuilder();
                    sb.Append(strPrefix);
                    while (strLen > 0)
                    {
                        var idx = (int)rnd.NextInt64(int64Min, int64Max);
                        sb.Append(romanAlphabet[idx]);
                        strLen--;
                    }
                    sb.Append(strSuffix);
                    strs.Add(sb.ToString());
                    _cnt--;
                }
                break;
            case 7:
                int64StrMin = (Int64)min;
                int64StrMax = (Int64)max;
                int64Min = 0;
                int64Max = alphanumeric.Length;
                strs.Clear();
                while (_cnt > 0)
                {
                    var strLen = rnd.NextInt64(int64StrMin, int64StrMax + 1);
                    var sb = new System.Text.StringBuilder();
                    sb.Append(strPrefix);
                    while (strLen > 0)
                    {
                        var idx = (int)rnd.NextInt64(int64Min, int64Max);
                        sb.Append(alphanumeric[idx]);
                        strLen--;
                    }
                    sb.Append(strSuffix);
                    strs.Add(sb.ToString());
                    _cnt--;
                }
                break;
            case 8:
                int64StrMin = (Int64)min;
                int64StrMax = (Int64)max;
                int64Min = 0;
                int64Max = ascii.Length;
                mstrs.Clear();
                while (_cnt > 0)
                {
                    var strLen = rnd.NextInt64(int64StrMin, int64StrMax + 1);
                    var sb = new System.Text.StringBuilder();
                    sb.Append(strPrefix);
                    while (strLen > 0)
                    {
                        var idx = (int)rnd.NextInt64(int64Min, int64Max);
                        sb.Append(AsciiEscape(ascii[idx]));
                        strLen--;
                    }
                    sb.Append(strSuffix);
                    mstrs.Add(new MarkupString(sb.ToString()));
                    _cnt--;
                }
                break;
            case 801:
                int64StrMin = (Int64)min;
                int64StrMax = (Int64)max;
                int64Min = 0;
                int64Max = custom.Length;
                mstrs.Clear();
                while (_cnt > 0)
                {
                    var strLen = rnd.NextInt64(int64StrMin, int64StrMax + 1);
                    var sb = new System.Text.StringBuilder();
                    sb.Append(strPrefix);
                    while (strLen > 0)
                    {
                        var idx = (int)rnd.NextInt64(int64Min, int64Max);
                        sb.Append(AsciiEscape(custom[idx]));
                        strLen--;
                    }
                    sb.Append(strSuffix);
                    mstrs.Add(new MarkupString(sb.ToString()));
                    _cnt--;
                }
                break;
            case 9:
                var byteArr = new byte[cnt];
                rnd.NextBytes(byteArr);
                bytes.Clear();
                bytes.AddRange(byteArr);
                break;
            case 10:
                guids.Clear();
                while (_cnt > 0)
                {
                    guids.Add(Guid.NewGuid());
                    _cnt--;
                }
                break;
        }
    }

    void GenerateNonRepeat()
    {
        if (max < min) max = min;
        var seed = RandomNumberGenerator.GetInt32(int.MinValue, int.MaxValue);
        var rnd = new Random(seed);
        var _cnt = cnt;
        Int64 int64Min;
        Int64 int64Max;
        List<char>? charList;
        switch (itemType)
        {
            case 1:
                int64Min = (Int64)min;
                int64Max = (Int64)max;
                nums.Clear();
                for (Int64 i = int64Min; i <= int64Max; i++)
                {
                    nums.Add(i);
                };
                Shuffle(nums, rnd);
                if(cnt < nums.Count)
                {
                    nums = nums.Take(cnt).ToList();
                }
                break;
            case 2:
                int64Min = (Int64)(min * Math.Pow(10, digits));
                int64Max = (Int64)(max * Math.Pow(10, digits));
                nums.Clear();
                for (Int64 i = int64Min; i <= int64Max; i++)
                {
                    nums.Add(i);
                };
                Shuffle(nums, rnd);
                if (cnt < nums.Count)
                {
                    nums = nums.Take(cnt).ToList();
                }
                break;
            case 3:
                charList = romanAlphabet.ToList();
                Shuffle(charList, rnd);
                if (cnt < charList.Count)
                {
                    charList = charList.Take(cnt).ToList();
                }
                strs = charList.Select(c => c.ToString()).ToList();
                break;
            case 4:
                charList = alphanumeric.ToList();
                Shuffle(charList, rnd);
                if (cnt < charList.Count)
                {
                    charList = charList.Take(cnt).ToList();
                }
                strs = charList.Select(c => c.ToString()).ToList();
                break;
            case 5:
                charList = ascii.ToList();
                Shuffle(charList, rnd);
                if (cnt < charList.Count)
                {
                    charList = charList.Take(cnt).ToList();
                }
                mstrs = charList.Select(c => new MarkupString(AsciiEscape(c))).ToList();
                break;
            case 501:
                charList = custom.ToList();
                Shuffle(charList, rnd);
                if (cnt < charList.Count)
                {
                    charList = charList.Take(cnt).ToList();
                }
                mstrs = charList.Select(c => new MarkupString(AsciiEscape(c))).ToList();
                break;
            default:
                nonrepeat = false;
                Generate();
                break;
        }
    }

    static void Shuffle<T>(IList<T> list, Random rnd)
    {
        int n = list.Count;
        while (n-- > 1)
        {
            int k = rnd.Next(n + 1);
            T value = list[k];
            list[k] = list[n];
            list[n] = value;
        }
    }

    static string AsciiEscape(char c) => c switch
    {
        ' ' => "&nbsp;",
        '"' => "&quot;",
        '&' => "&amp;",
        '<' => "&lt;",
        '>' => "&gt;",
        _ => c.ToString(),
    };
}
