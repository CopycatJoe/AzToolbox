@page "/Common/Base64Utils"
<PageTitle>Base64 Utils - AzToolbox</PageTitle>

@using KzA.Blazor.HexDump
@using System.Text;

@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

<Div Flex="Flex.Row.JustifyContent.Between" Margin="Margin.Is2.FromBottom">
    <Card Flex="Flex.AlignSelf.Stretch.Grow.Is1" Margin="Margin.Is1.FromEnd">
        <CardBody>
            <CardTitle Size="6">
                Base64
            </CardTitle>
            <MemoEdit @bind-Text="@base64str" Rows="12"
                      Class="monospace-fixed-textbox" />
            <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Clicked="FromBase64" Width="Width.Is25">
                From Base64
            </Button>
        </CardBody>
    </Card>
    <Card Flex="Flex.AlignSelf.Stretch.Grow.Is1" Margin="Margin.Is1.FromStart">
        <CardBody>
            <CardTitle Size="6">
                Data
            </CardTitle>
            <SelectList TItem="EncodingInfo"
                        TValue="int"
                        Data="@SupportedEncodings"
                        TextField="@((item)=>item.Name)"
                        ValueField="@((item)=>item.CodePage)"
                        DefaultItemValue="65001"
            @bind-SelectedValue="selectedCodePage" />
            <MemoEdit @bind-Text="@decodedstr" Rows="10"
                      Class="monospace-fixed-textbox" />
            <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" Clicked="FromString" Width="Width.Is25">
                To Base64
            </Button>
        </CardBody>
    </Card>
</Div>

<Card>
    <CardBody>
        <CardTitle Size="6">
            Hex Dump
        </CardTitle>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="CopyHexDump">
            Copy Hex Dump
        </Button>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="CopyHexDumpSelection">
            Copy Selected HEX
        </Button>
        <Button Color="@(blockSelection ? Color.Success : Color.Info)" Size="Size.ExtraSmall" Clicked="() => blockSelection = !blockSelection">
            Toggle Selection Mode
        </Button>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="() => hdpos -= hdlen" Disabled="@(!canPrevious)">
            Previous Page
        </Button>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="() => hdpos += hdlen" Disabled="@(!canNext)">
            Next Page
        </Button>
        <!-- TODO: Update inspection position when viewport changes -->
        <HexDump @ref="hxdp" Data="@blob" 
            BlockSelection="@blockSelection" 
            DataDisplayPosition="@hdpos"
            DataDisplayLength="@hdlen"
            DataInspectionPosition="DataInspectionPosition.Right" />
    </CardBody>
</Card>

@code {
    string base64str = string.Empty;
    byte[] blob = Array.Empty<byte>();
    string decodedstr = string.Empty;
    HexDump hxdp = null!;
    bool blockSelection = false;
    SelectList<EncodingInfo, Encoding> encodingSelect = new();

    bool canNext => hdpos + hdlen < blob.Length;
    bool canPrevious => hdpos > 0;

    int hdpos = 0;
    int hdlen = 256;

    static readonly IEnumerable<EncodingInfo> SupportedEncodings = System.Text.Encoding.GetEncodings();
    int selectedCodePage = 65001;

    protected override void OnInitialized()
    {
        blob = new byte[256];
        for (int i = 0; i < blob.Length; i++)
        {
            blob[i] = (byte)i;
        }
        base64str = Convert.ToBase64String(blob);
        decodedstr = Encoding.GetEncoding(selectedCodePage).GetString(blob);
    }

    void FromBase64()
    {
        try
        {
            blob = Convert.FromBase64String(base64str);
            decodedstr = Encoding.GetEncoding(selectedCodePage).GetString(blob);
        }
        catch (Exception e)
        {
            NotificationService.Error(e.Message);
        }
    }

    void FromString()
    {
        blob = Encoding.GetEncoding(selectedCodePage).GetBytes(decodedstr);
        base64str = Convert.ToBase64String(blob);
    }

    async Task CopyHexDump()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", hxdp.ToString());
        if (message == "Success")
        {
            await NotificationService.Success("Hex Dump copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }

    async Task CopyHexDumpSelection()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", hxdp.SelectionToString(true));
        if (message == "Success")
        {
            await NotificationService.Success("Hex Values copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }
}
