@page "/Common/HEXEH"
<PageTitle>HEX Interpreter - AzToolbox</PageTitle>

@using KzA.Blazor.HexDump
@using System.Text;
@using KzA.HEXEH.Base.Output
@using KzA.HEXEH.Base.Parser
@using KzA.HEXEH.Core.Parser
@using KzA.HEXEH.Core.Parser.Common.String

@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject HexehService HexehService

<Splitter Direction="SplitterDirection.Vertical" Style="height:calc(100vh - 74px - 1rem)">
    <SplitterSection MinSize="400" Overflow="Overflow.Hidden">
        <Splitter Style="min-height:400px">
            <SplitterSection Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto">
                <MemoEdit @bind-Text="@hexstring" Rows="12" spellcheck="false"
                          Class="monospace-fixed-textbox" Margin="Margin.Is1.FromBottom" />
                <Field Margin="Margin.Is1.OnY" Horizontal Flex="Flex.AlignItems.Center">
                    <FieldLabel>
                        Type
                    </FieldLabel>
                    <FieldBody Flex="Flex.Grow.Is1" Margin="Margin.Is1.FromStart">
                        <Select TValue="string" @bind-SelectedValue="@TargetParserName" Margin="Margin.Is1.FromBottom">
                            @foreach (var group in groupedParsers)
                            {
                                <SelectGroup Label="@group.Key[(group.Key.LastIndexOf(".Parser.") + 8)..]">
                                    @foreach (var parser in group)
                                    {
                                        <SelectItem Value="@parser.FullName">@parser.Name[..(parser.Name.Length - 6)]</SelectItem>
                                    }
                                </SelectGroup>
                            }
                        </Select>
                    </FieldBody>
                </Field>
                <Field Margin="Margin.Is1.FromBottom" Horizontal Flex="Flex.AlignItems.Center">
                    <FieldLabel>
                        Big Endian
                        <Tooltip Text="Some parsers will ignore this option" Display="Display.Inline">
                            <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.InfoFilled" />
                        </Tooltip>
                    </FieldLabel>
                    <FieldBody Flex="Flex.Grow.Is1" Margin="Margin.Is1.FromStart">
                        <Select TValue="string" @bind-SelectedValue="@bigEndian">
                            <SelectItem Value="@("True")">True</SelectItem>
                            <SelectItem Value="@("False")">False</SelectItem>
                        </Select>
                    </FieldBody>
                </Field>
                @foreach (var option in ParserOptionsDef)
                {
                    <Field Margin="Margin.Is1.FromBottom" Horizontal Flex="Flex.AlignItems.Center">
                        <FieldLabel>
                            @option.Key
                        </FieldLabel>
                        <FieldBody Flex="Flex.Grow.Is1" Margin="Margin.Is1.FromStart">
                            @switch (option.Value.Name)
                            {
                                case "Encoding":
                                    <Select TValue="string" @bind-SelectedValue="@ParserOptions[option.Key]">
                                        @foreach (var encoding in System.Text.Encoding.GetEncodings())
                                        {
                                            <SelectItem Value="@encoding.Name">@encoding.Name</SelectItem>
                                        }
                                    </Select>
                                    break;
                                case "Boolean":
                                    <Select TValue="string" @bind-SelectedValue="@ParserOptions[option.Key]">
                                        <SelectItem Value="@("True")">True</SelectItem>
                                        <SelectItem Value="@("False")">False</SelectItem>
                                    </Select>
                                    break;
                                default:
                                    <TextEdit @bind-Text="@ParserOptions[option.Key]" />
                                    break;
                            }
                        </FieldBody>
                    </Field>
                }
                <Button Color="Color.Primary" Margin="Margin.Is1.FromBottom" Clicked="Parse" Block="true" Disabled="!ready">
                    @(ready ? "Go" : "Initializing")
                </Button>
            </SplitterSection>
            <SplitterSection Display="Display.Flex" Flex="Flex.Column">
                <Div>
                    <Button Color="Color.Primary" Clicked="CopyTreeView" Size="Size.ExtraSmall" Disabled="@(DataTreeHead == null || DataTreeHead.Count() == 0)">
                        Copy Tree
                    </Button>

                    <Button Color="@(showDataPosLen ? Color.Success : Color.Primary)" Clicked="() => showDataPosLen = !showDataPosLen" Size="Size.ExtraSmall" Disabled="@(DataTreeHead == null || DataTreeHead.Count() == 0)">
                        Show position and length
                    </Button>
                </Div>

                <Div Overflow="Overflow.Scroll">
                    <TreeView TNode="DataNode" Nodes="DataTreeHead"
                              GetChildNodes="@(item => item.Children)"
                              HasChildNodes="@(item => item.Children.Count > 0)"
                              AutoExpandAll="true">
                        <NodeContent>
                            <Text TextWeight="TextWeight.Bold" Class="monospace-text">@(context.Label):</Text>
                            <Text Padding="Padding.Is1.FromStart" Class="monospace-text">@(showDataPosLen ? $"[{context.Index}:{context.Length}] {context.DisplayValue}" : context.DisplayValue)</Text>
                        </NodeContent>
                    </TreeView>
                </Div>
            </SplitterSection>
        </Splitter>
    </SplitterSection>
    <SplitterSection Overflow="Overflow.Scroll">
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="CopyHexDump">
            Copy Hex Dump
        </Button>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="CopyHexDumpSelection">
            Copy Selected HEX
        </Button>
        <Button Color="@(blockSelection ? Color.Success : Color.Info)" Size="Size.ExtraSmall" Clicked="() => blockSelection = !blockSelection">
            Toggle Selection Mode
        </Button>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="() => hdpos -= hdlen" Disabled="@(!canPrevious)">
            Previous Page
        </Button>
        <Button Color="Color.Info" Size="Size.ExtraSmall" Clicked="() => hdpos += hdlen" Disabled="@(!canNext)">
            Next Page
        </Button>
        <HexDump @ref="hxdp" Data="@blob"
                 BlockSelection="@blockSelection"
                 DataDisplayPosition="@hdpos"
                 DataDisplayLength="@hdlen"
                 DataInspectionPosition="DataInspectionPosition.Right" />
    </SplitterSection>
</Splitter>

@code {
    [CascadingParameter(Name = "MainLayout")]
    public MainLayout? layout { get; set; }

    string hexstring = string.Empty;
    IEnumerable<IGrouping<string, Type>> groupedParsers = [];
    string targetParserName = "KzA.HEXEH.Core.Parser.Common.String.StringParser";
    string TargetParserName
    {
        get => targetParserName;
        set
        {
            targetParserName = value;
            targetParserInstance = ParserManager.InstantiateParserByFullName(targetParserName);
            ParserOptionsDef = targetParserInstance.GetOptions();
            ParserOptions.Clear();
            foreach (var def in ParserOptionsDef)
            {
                var defaultValue = string.Empty;
                switch (def.Value.Name)
                {
                    case "Encoding": defaultValue = "utf-8"; break;
                    case "Boolean": defaultValue = "False"; break;
                }
                ParserOptions.Add(def.Key, defaultValue);
            }
        }
    }
    IParser targetParserInstance = new StringParser();
    Dictionary<string, string> ParserOptions = [];
    Dictionary<string, Type> ParserOptionsDef = [];
    string bigEndian = "False";

    IEnumerable<DataNode> DataTreeHead = null!;
    bool showDataPosLen = false;
    bool ready = false;

    byte[] blob = Array.Empty<byte>();

    HexDump hxdp = null!;
    bool blockSelection = false;

    bool canNext => hdpos + hdlen < blob.Length;
    bool canPrevious => hdpos > 0;

    int hdpos = 0;
    int hdlen = 256;

    protected async override Task OnInitializedAsync()
    {
        if (layout != null) layout.ShowFooter = false;
        await HexehService.InitializeAsync();
        groupedParsers = ParserManager.AvailableParsers.GroupBy(p => p.Namespace ?? string.Empty);
        ParserOptionsDef = targetParserInstance.GetOptions();
        ParserOptions.Add("Encoding", "utf-8");
        ready = true;
    }

    void Parse()
    {
        try
        {
            var escaped = System.Text.RegularExpressions.Regex.Replace(hexstring, @"[\\\r\n\s,-]|0x", string.Empty);
            blob = Convert.FromHexString(escaped);
            var parser = ParserManager.InstantiateParserByFullName(targetParserName);
            var opts = new Dictionary<string, string>();
            foreach (var opt in ParserOptions)
            {
                if (opt.Key.EndsWith('?') && !string.IsNullOrWhiteSpace(opt.Value))
                    opts.Add(opt.Key[..(opt.Key.Length - 1)], opt.Value);
                else
                {
                    opts.Add(opt.Key, opt.Value);
                }
            }
            opts.Add("BigEndian", bigEndian.ToString());
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(opts)); // Log options provided
            try { parser.SetOptionsFromSchema(opts); }
            catch (NotSupportedException)
            {
                /* Nothing actual to be done if the parser does not accept options */
                Console.WriteLine("Target parser does not need options");
            }
            DataTreeHead = [parser.Parse(blob)];
        }
        catch (Exception e)
        {
            NotificationService.Error(e.Message);
            Console.WriteLine(e.Message);
            var inner = e.InnerException;
            while (inner != null)
            {
                Console.WriteLine(inner.Message);
                inner = inner.InnerException;
            }
            Console.WriteLine(e.StackTrace);
        }
    }

    async Task CopyHexDump()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", hxdp.ToString());
        if (message == "Success")
        {
            await NotificationService.Success("Hex Dump copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }

    async Task CopyHexDumpSelection()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", hxdp.SelectionToString(true));
        if (message == "Success")
        {
            await NotificationService.Success("Hex Values copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }

    async Task CopyTreeView()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", DataTreeHead.First().ToString());
        if (message == "Success")
        {
            await NotificationService.Success("Data tree copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }
}

