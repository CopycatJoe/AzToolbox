@page "/Common/SubtleCrypto"
<PageTitle>SubtleCrypto - AzToolbox</PageTitle>

@inject INotificationService NotificationService
@inject CryptoService crysvc

<Alert Color="Color.Primary" Visible="true" Margin="Margin.Is1.FromBottom">
    <AlertMessage>
        <Icon Name="Blazorise.Icons.FluentUI.FluentUIIcons.InfoFilled" IconSize="IconSize.Large" />Algorithm
    </AlertMessage>
    <AlertDescription Class="monospace-text">
        @MSG
    </AlertDescription>
</Alert>

<Div Flex="Flex.Row">
    <RadioGroup @bind-CheckedValue="mode">
        <Radio Value="true">Encrypt</Radio>
        <Radio Value="false">Decrypt</Radio>
    </RadioGroup>
    <SelectList TValue="CryptoAlgorithm"
                TItem="CryptoAlgorithm"
                TextField="@(s=>s.ToString().Replace("_", "-"))"
                ValueField="s=>s"
                Data="@(Enum.GetValues<CryptoAlgorithm>())"
                @bind-SelectedValue="algorithm" />
    <Select @bind-SelectedValue="@length">
        <SelectItem Value="128">128</SelectItem>
        <SelectItem Value="256">256</SelectItem>
    </Select>
    <Div Margin="Margin.Is1.OnX" Width="Width.Px(100)">
        <NumericEdit @bind-Value="@iter" Min="0" Max="int.MaxValue" />
    </Div>
    <Button Color="Color.Primary" Clicked="@(() => mode ? enc() : dec())">Go</Button>
</Div>
<Field>
    <FieldLabel>Passphrase</FieldLabel>
    <TextEdit Role="TextRole.Password" @bind-Text="pass"></TextEdit>
</Field>
<Field>
    <FieldLabel>@(mode ? "Plain" : "Cipher")</FieldLabel>
    <MemoEdit Plaintext="false" Rows="6" spellcheck="false"
              Class="monospace-fixed-textbox" @bind-Text="input"></MemoEdit>
</Field>
<Field>
    <FieldLabel>@(mode ? "Cipher" : "Plain")</FieldLabel>
    <MemoEdit Plaintext="false" Rows="6" spellcheck="false" ReadOnly="true"
              Class="monospace-fixed-textbox" @bind-Text="output"></MemoEdit>
</Field>

@code {
    bool mode = true;
    string pass = string.Empty;
    string input = string.Empty;
    string output = string.Empty;
    CryptoAlgorithm algorithm = CryptoAlgorithm.AES_CBC;
    int length = 256;
    int iter = 5000;

    const string MSG = 
 @"Passphrase ---SHA256--> BaseKey ---PBKDF2(Optional)--> AES Key
Set iteration to 0 to skip PBKDF2. The result will always include PBKDF2 salt, even when it's unused.
Result format: 
| 16 bytes    | 16 bytes    |  ...   |
|-------------|-------------|--------|
| AES IV/CTR  | PBKDF2 Salt | Cipher |";

    async Task enc()
    {
        if (pass.Length == 0 || input.Length == 0) return;
        try
        {
            output = await crysvc.AesEncrypt(pass, input, algorithm, length, iter);
        }
        catch (Exception e)
        {
            await NotificationService.Error(e.Message);
        }
    }

    async Task dec()
    {
        if (pass.Length == 0 || input.Length == 0) return;
        try
        {
            output = await crysvc.AesDecrypt(pass, input, algorithm, length, iter);
        }
        catch (Exception e)
        {
            await NotificationService.Error(e.Message);
        }
    }
}
