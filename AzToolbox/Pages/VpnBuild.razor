@page "/VpnBuild"
<PageTitle>VPN ProfileXML Builder - AzToolbox</PageTitle>

@using ProfileXMLBuilder.Lib
@using AzToolbox.Components.VpnBuild

@inject INotificationService NotificationService
@inject IModalService ModalService
@inject IJSRuntime JSRuntime
@inject VpnBuildService svc

<Row>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Field>
            <Switch TValue="bool" @bind-Checked="@svc.UserTunnel">User Tunnel</Switch>
        </Field>
        <Field>
            <FieldLabel>Server Address</FieldLabel>
            <TextEdit @bind-Text="@svc.VpnServer" />
        </Field>
        <Divider DividerType="DividerType.TextContent" Text="DNS Settings" />
        <Tooltip Text="Comma separated DNS suffix list." Placement="TooltipPlacement.Right">
            <Field>
                <FieldLabel>Domain DNS Suffix</FieldLabel>
                <TextEdit @bind-Text="@svc.DomainDnsSuffix" />
            </Field>
        </Tooltip>
        <Tooltip Text="Comma separated name list." Placement="TooltipPlacement.Right">
            <Field>
                <FieldLabel>Trusted Network Detection</FieldLabel>
                <TextEdit @bind-Text="@svc.TrustedNetworkDetection" />
            </Field>
        </Tooltip>
        @if (svc.UserTunnel)
        {
            <Div ElementId="ut-fields">
                <Tooltip Text="Generate NRPT rules according to domain DNS suffix." Placement="TooltipPlacement.Right">
                    <Field>
                        <Switch TValue="bool" @bind-Checked="@svc.DomainNRPT">Domain NRPT Generataion</Switch>
                    </Field>
                </Tooltip>
                @if (svc.DomainNRPT)
                {
                    <Tooltip Text="Comma separated IP address list, e.g. 10.1.1.1,10.1.2.2. For NRPT." Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>DNS Servers</FieldLabel>
                            <TextEdit @bind-Text="@svc.DnsServers" />
                        </Field>
                    </Tooltip>
                }
                <Divider DividerType="DividerType.TextContent" Text="Tunnel Settings" />
                <Field>
                    <FieldLabel>Tunnel Protocol</FieldLabel>
                    <SelectList TItem="NativeProtocolType"
                            TValue="NativeProtocolType"
                            TextField="@(t=>t.ToString())"
                            ValueField="@(t=>t)"
                            Data="@(Enum.GetValues<NativeProtocolType>())"
                            @bind-SelectedValue="@svc.TunnelProtocol" />
                </Field>
                @if (svc.TunnelProtocol == NativeProtocolType.ProtocolList)
                {
                    <Tooltip Text="Comma separated protocol list, e.g. SSTP,IKEv2,L2TP" Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>Protocol List</FieldLabel>
                            <TextEdit @bind-Text="@svc.ProtocolListString" />
                        </Field>
                    </Tooltip>
                }
                <Divider DividerType="DividerType.TextContent" Text="Authentication Settings" />
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.Tls">TLS</Switch>
                </Field>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.Peap">PEAP</Switch>
                </Field>
                @if (svc.Tls || svc.Peap)
                {
                    <Field>
                        <Switch TValue="bool" @bind-Checked="@svc.DisableServerValidationPrompt">Disable RADIUS Server Validation Prompt</Switch>
                    </Field>
                    <Field>
                        <FieldLabel>RADIUS Server Name</FieldLabel>
                        <TextEdit @bind-Text="@svc.RadiusServerName" />
                    </Field>
                    <Tooltip Text="Comma separated hash list, e.g. abcdef123456,654321fedcba." Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>RADIUS Server Root CA Hash</FieldLabel>
                            <TextEdit @bind-Text="@svc.RootCAHash" />
                        </Field>
                    </Tooltip>
                }
                <Divider DividerType="DividerType.TextContent" Text="Routing Settings" />
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.ForceTunnel">Force Tunnel</Switch>
                </Field>
                @if (!svc.ForceTunnel)
                {
                    <Field>
                        <Switch TValue="bool" @bind-Checked="@svc.SimpleRoute">Simple Route Generation</Switch>
                    </Field>
                    @if (svc.SimpleRoute)
                    {
                        <Tooltip Text="Comma separated subnet list, e.g. 10.1.1.0/24,10.1.2.0/24." Placement="TooltipPlacement.Right">
                            <Field>
                                <FieldLabel>Domain Subnets</FieldLabel>
                                <TextEdit @bind-Text="@svc.DomainSubnets" />
                            </Field>
                        </Tooltip>
                    }
                }
            </Div>
        }
        else
        {
            <Div ElementId="dt-fields">
                <Divider DividerType="DividerType.TextContent" Text="Tunnel Settings" />
                <Field>
                    <FieldLabel>Tunnel Protocol</FieldLabel>
                    <SelectList TItem="NativeProtocolType"
                            TValue="NativeProtocolType"
                            TextField="@(t=>t.ToString())"
                            ValueField="@(t=>t)"
                            Data="@(Enum.GetValues<NativeProtocolType>())"
                            SelectedValue="NativeProtocolType.IKEv2"
                            Disabled="true" />
                </Field>
                <Divider DividerType="DividerType.TextContent" Text="Routing Settings" />
                <Field>
                    <Switch TValue="bool" Checked="false" Disabled="true">Force Tunnel</Switch>
                </Field>
                <Field>
                    <Switch TValue="bool" @bind-Checked="@svc.SimpleRoute">Simple Route Generation</Switch>
                </Field>
                @if (svc.SimpleRoute)
                {
                    <Tooltip Text="Comma separated IPv4 address list, e.g. 10.1.1.1,10.1.2.2." Placement="TooltipPlacement.Right">
                        <Field>
                            <FieldLabel>Domain Controller Addresses</FieldLabel>
                            <TextEdit @bind-Text="@svc.DomainControllerAddresses" />
                        </Field>
                    </Tooltip>
                }
            </Div>
        }
        @if (svc.UserTunnel)
        {
            <Button Color="Color.Info" Clicked="ShowNrpt" Class="button-margin-Y">NRPT</Button>
            <Button Color="Color.Info" Clicked="ShowTrafficFilters" Class="button-margin-Y">Traffic Filters</Button>
            <Button Color="Color.Info" Clicked="ShowRoutes" Class="button-margin-Y">Routes</Button>
            <Button Color="Color.Info" Clicked="ShowProxy" Class="button-margin-Y">Proxy</Button>
            <Button Color="Color.Info" Clicked="ShowCryptographySuite" Disabled="@svc.NotIKEv2" Class="button-margin-Y">IPsec Policy</Button>
            <Button Color="Color.Info" Clicked="ShowDeviceCompliance" Disabled="@(!svc.Tls)" Class="button-margin-Y">Device Compliance</Button>
            <Button Color="Color.Info" Clicked="ShowCertificateSelection" Disabled="@(!svc.Tls)" Class="button-margin-Y">Certificate Selection</Button>
            <Button Color="Color.Info" Clicked="ShowExtraSettings" Class="button-margin-Y">Extra Settings</Button>
        }
        else
        {
            <Button Color="Color.Info" Clicked="ShowTrafficFilters" Class="button-margin-Y">Traffic Filters</Button>
            <Button Color="Color.Info" Class="button-margin-Y">Routes</Button>
            <Button Color="Color.Info" Clicked="ShowCryptographySuite" Class="button-margin-Y">IPsec Policy</Button>
            <Button Color="Color.Info" Clicked="ShowExtraSettings" Class="button-margin-Y">Extra Settings</Button>
        }
    </Column>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Button Color="Color.Primary" Clicked="@Build" Block>Build</Button>
        <Row HorizontalGutter="8" Margin="Margin.Is2.FromTop">
            <Column ColumnSize="ColumnSize.Is6">
                <Button Color="Color.Success" Disabled="@(!built)" Clicked="@CopyToClipboard" Block>Copy to Clipboard</Button>
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <Button Color="Color.Success" Disabled="@(!built)" Clicked="@Download" Block>Download</Button>
            </Column>
        </Row>
        <Alert Color="Color.Warning" Visible="@svc.Win11Profile" Margin="Margin.Is2.FromTop">
            <AlertMessage>Windows 11 ONLY</AlertMessage>
            <AlertDescription>This profile contains settings that are only valid for Windows 11 21H2+. Check <a target="_blank" href="https://learn.microsoft.com/en-us/windows/client-management/mdm/vpnv2-csp">VPNv2 CSP</a> for more info.</AlertDescription>
        </Alert>
        <MemoEdit @bind-Text="@svc.ProfileXml"
                  Style="font-family:'Cascadia Code',Consolas,'Courier New',monospace;font-size:small"
                  Margin="Margin.Is2.FromTop"
                  AutoSize ReadOnly />
    </Column>
</Row>

@code {
    bool built = false;
    private Task Build()
    {
        try
        {
            svc.Build();
            built = true;
            return InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            return NotificationService.Error(e.Message, "Build Failed");
        }
    }

    private Task ShowTrafficFilters()
    {
        return ModalService.Show<TrafficFilterModal>("Traffic Filters", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowNrpt()
    {
        return ModalService.Show<NrptModal>("NRPT", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowRoutes()
    {
        return ModalService.Show<RouteModal>("Routes", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowCryptographySuite()
    {
        return ModalService.Show<CryptographySuiteModal>("Cryptography Suite", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowProxy()
    {
        return ModalService.Show<ProxyModal>("Proxy", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowDeviceCompliance()
    {
        return ModalService.Show<DeviceComplianceModal>("Device Compliance", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }
    
    private Task ShowCertificateSelection()
    {
        return ModalService.Show<CertificateSelectionModal>("Certificate Selection", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private Task ShowExtraSettings()
    {
        return ModalService.Show<ExtraSettingsModal>("Extra Settings", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge
            });
    }

    private async Task CopyToClipboard()
    {
        var message = await JSRuntime.InvokeAsync<string>("copyTextToClipboard", svc.ProfileXml);
        if (message == "Success")
        {
            await NotificationService.Success("ProfileXML copied!");
        }
        else
        {
            await NotificationService.Error(message, "Copy Failed");
        }
    }

    private async Task Download()
    {
        var jsparams = new object[]
        {
            "VPNProfile.XML", "text/xml", svc.ProfileXml
        };
        await JSRuntime.InvokeVoidAsync("blazorFileDownload", jsparams);
    }
}
