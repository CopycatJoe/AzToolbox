@page "/WfpAnalyze"
<PageTitle>WFP Trace Analyze - AzToolbox</PageTitle>

@using WfpXmlHelper;
@using AzToolbox.Components.WfpAnalyze;

@inject ILoadingIndicatorService ApplicationLoadingIndicatorService

@if (!ShowResult)
{
    <Div Style="margin: 0 100px 0 100px">
        <FilePicker Upload="OnFileSelected" Filter=".xml" @ref="filePickerCustom">
            <FileTemplate>
                <Div Flex="Flex.JustifyContent.Between">
                    <Div>
                        <Heading Size="HeadingSize.Is5">@context.File.Name</Heading>
                    </Div>
                    <Div>
                        <Button Clicked="@(()=>filePickerCustom.UploadFile(context.File))" Color="Color.Primary">Read & Analayze</Button>
                    </Div>
                </Div>
                <Divider />
                <Progress Value="@filePickerCustom.GetProgressPercentage()" />
            </FileTemplate>
            <ButtonsTemplate>
            </ButtonsTemplate>
        </FilePicker>
    </Div>

    @if (ShowParsingProgress)
    {
        <Card Style="margin: 0 100px 0 100px">
            <CardBody>
                <Heading Size="HeadingSize.Is5">@($"Parsing {wfpdiag.CurrentItem}") </Heading>
                <Divider />
                <Progress Value="@wfpdiag.CurrentCount" Max="@wfpdiag.CurrentMax" />
            </CardBody>
        </Card>
    }
}
else
{
    <Button Clicked="@(()=>ShowResult = false)" Color="Color.Primary"><Icon Name="IconName.ArrowLeft" />Select Another File</Button>
    <Tabs SelectedTab="netevents">
        <Items>
            <Tab Name="netevents">Drop Events</Tab>
            <Tab Name="initfilters">Initial Filters</Tab>
            <Tab Name="addedfilters">Added Filters</Tab>
            <Tab Name="providers">Providers</Tab>
        </Items>
        <Content>
            <TabPanel Name="netevents">
                <NetEventClassifyDropDataGrid NetEvents="wfpdiag.NetEventsClassifyDrop" />
            </TabPanel>
            <TabPanel Name="initfilters">
                <FilterDataGrid Filters="wfpdiag.InitialFilters" />
            </TabPanel>
            <TabPanel Name="addedfilters">
                <FilterDataGrid Filters="wfpdiag.AddedFilters" />
            </TabPanel>
            <TabPanel Name="providers">
                <ProviderDataGrid Providers="wfpdiag.Providers" />
            </TabPanel>
        </Content>
    </Tabs>
}

@code {
    bool ShowResult = false;
    bool ShowParsingProgress = false;
    FilePicker filePickerCustom = new();
    WfpDiag wfpdiag = new();

    async Task OnFileSelected(FileUploadEventArgs e)
    {
        await ApplicationLoadingIndicatorService.Show();

        var file = e.File;
        using var fileStream = file.OpenReadStream(104857600);
        using var memStream = new MemoryStream();
        await fileStream.CopyToAsync(memStream);
        Console.WriteLine($"{DateTime.Now:yyyyMMddTHHmmss.ffffff}: File Read");

        var enc = new System.Text.UTF8Encoding();
        var xml = enc.GetString(memStream.ToArray());
        string _byteOrderMarkUtf8 = System.Text.Encoding.UTF8.GetString(System.Text.Encoding.UTF8.GetPreamble());
        if (xml.StartsWith(_byteOrderMarkUtf8))
        {
            xml = xml.Remove(0, _byteOrderMarkUtf8.Length);
        }
        Console.WriteLine($"{DateTime.Now:yyyyMMddTHHmmss.ffffff}: String Parsed");
        ShowParsingProgress = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            wfpdiag.Load(xml);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        ShowParsingProgress = false;
        ShowResult = true;

        await ApplicationLoadingIndicatorService.Hide();
        await InvokeAsync(StateHasChanged);
    }
}
