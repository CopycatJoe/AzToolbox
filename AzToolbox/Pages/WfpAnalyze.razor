@page "/WfpAnalyze"
<PageTitle>WFP Trace Analyze - AzToolbox</PageTitle>

@using WfpXmlHelper;
@using AzToolbox.Components.WfpAnalyze;

@inject ILoadingIndicatorService ApplicationLoadingIndicatorService
@inject INotificationService NotificationService

@if (!ShowResult)
{
    <Div Style="margin: 0 100px 0 100px">
        <FilePicker Upload="OnFileSelected" Filter=".xml" @ref="filePickerCustom">
            <FileTemplate>
                <Div Flex="Flex.JustifyContent.Between">
                    <Div>
                        <Heading Size="HeadingSize.Is5">@context.File.Name</Heading>
                    </Div>
                    <Div>
                        <Button Clicked="@(()=>filePickerCustom.UploadFile(context.File))" Color="Color.Primary">Read & Analayze</Button>
                    </Div>
                </Div>
                <Divider />
                <Progress Value="@filePickerCustom.GetProgressPercentage()" />
            </FileTemplate>
            <ButtonsTemplate>
            </ButtonsTemplate>
        </FilePicker>
    </Div>

    @if (ShowParsingProgress)
    {
        <Card Style="margin: 0 100px 0 100px">
            <CardBody>
                <Heading Size="HeadingSize.Is5">@($"Parsing XML") </Heading>
                <Divider />
                <Progress Value="@wfpdiag.CurrentCount" Max="@wfpdiag.CurrentMax" ShowValue /> <!-- Won't work due to WASM limitation -->
            </CardBody>
        </Card>
    }
}
else
{
    <Button Clicked="@(()=>ShowResult = false)" Color="Color.Primary"><Icon Name="IconName.ArrowLeft" /> Select Another File</Button>
    @resultFragment;
}

@code {
    bool ShowResult = false;
    bool ShowParsingProgress = false;
    FilePicker filePickerCustom = new();
    WfpDiag wfpdiag = new();
    WfpState wfpstate = new();
    NetEvents netevents = new();
    RenderFragment? resultFragment;

    async Task OnFileSelected(FileUploadEventArgs e)
    {
        await ApplicationLoadingIndicatorService.Show();

        var file = e.File;
        using var fileStream = file.OpenReadStream(104857600);
        using var memStream = new MemoryStream();
        await fileStream.CopyToAsync(memStream);

        var enc = new System.Text.UTF8Encoding();
        var xml = enc.GetString(memStream.ToArray());
        string _byteOrderMarkUtf8 = System.Text.Encoding.UTF8.GetString(System.Text.Encoding.UTF8.GetPreamble());
        if (xml.StartsWith(_byteOrderMarkUtf8))
        {
            xml = xml.Remove(0, _byteOrderMarkUtf8.Length);
        }
        ShowParsingProgress = true;
        StateHasChanged();

        try
        {
            if (xml.Contains("<wfpstate"))
            {
                await Task.Run(() => wfpstate.Load(xml));
                resultFragment = @<WfpStateTabView Filters="@wfpstate.Filters" Providers="@wfpstate.Providers" />;
            }
            else if (xml.Contains("<wfpdiag"))
            {
                await Task.Run(() => wfpdiag.Load(xml));
                resultFragment = @<WfpDiagTabView NetEvents="@wfpdiag.NetEventsClassifyDrop" InitialFilters="@wfpdiag.InitialFilters" AddedFilters="@wfpdiag.AddedFilters" Providers="@wfpdiag.Providers" />;
            }
            else if (xml.Contains("<netEvents"))
            {
                await Task.Run(() => netevents.Load(xml));
                resultFragment = @<NetEventClassifyDropDataGrid NetEvents="@netevents.NetEventsClassifyDrop" />;
            }
            else
            {
                throw new InvalidDataException("Invalid XML file");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.Error(ex.Message);
            resultFragment = @<Heading Size="HeadingSize.Is5">@ex.GetType().ToString()</Heading>;
            resultFragment += @<Paragraph>@ex.Message</Paragraph>;
        }
        ShowParsingProgress = false;
        ShowResult = true;

        await ApplicationLoadingIndicatorService.Hide();
        await InvokeAsync(StateHasChanged);
    }
}
