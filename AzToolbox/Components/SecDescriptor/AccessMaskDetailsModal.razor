@using AzToolbox.Models;
@using WinSdUtil.Lib.Model;
@using System.Buffers.Binary;

<Div Overflow="Overflow.Auto">
    <Card>
        <Grid Columns="GridColumns.Are2" Gap="Gap.Is1">
            <SelectList TItem="AccessMaskType"
                        TValue="AccessMaskType"
                        Data="Enum.GetValues<AccessMaskType>().Where(t => t!=AccessMaskType.Unknown)"
                        TextField="@(item => item.ToString())"
                        ValueField="@(item => item)"
                        @bind-SelectedValue="@(mask.ObjectType)" />
            <TextEdit Placeholder="Input access mask number or SDDL" Margin="Margin.Is1.FromStart" TextChanged="InputChanged" />
        </Grid>

        <MemoEdit ReadOnly Text="@CastedText.Item1" Placeholder="Flags" Rows="3" Style="resize:none" Margin="Margin.Is1.FromTop" />
        <MemoEdit ReadOnly Text="@CastedText.Item2" Placeholder="SDDL" Rows="1" Style="resize:none" Margin="Margin.Is1.FromTop" />
    </Card>

    @foreach (var bit in mask)
    {
        @if (bit.Item1 == 0)
        {
            <Blazorise.Text TextWeight="TextWeight.Bold" Class="monospace-text">Object Specific (@mask.ObjectType)</Blazorise.Text>
        }
        @if (bit.Item1==16)
        {
            <Blazorise.Text TextWeight="TextWeight.Bold" Class="monospace-text">Generic</Blazorise.Text>
        }
        <AccessMaskBit Margin="Margin.Is4.FromStart" BitPosition="@bit.Item1" BitValue="@bit.Item2" BitValueChanged="b=>BitChanged(b, bit.Item1)" Label="@(mask.BitNames.ElementAt(bit.Item1))" LabelPadding="@(mask.BitNames.Max(n => n.Length))" />
    }
    <Div Margin="Margin.Is2.OnY" />
</Div>

<style>
    .fui-Checkbox__input + .fui-Checkbox__indicator {
        margin: 0
    }
</style>

@code {
    AccessMask mask = new();

    (string, string) CastedText =>
        (string.Join(',', mask.ToStrings()), mask.ToSDDL());

    protected override void OnInitialized()
    {
        mask.ObjectType = AccessMaskType.File;
    }

    void InputChanged(string newValue)
    {
        try
        {
            mask.FromSDDL(newValue);
        }
        catch { }
    }

    void BitChanged(bool value, int index)
    {
        mask[index] = value;
    }
}
