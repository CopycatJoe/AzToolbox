@using AzToolbox.Models;
@using WinSdUtil.Lib.Model;
@using System.Collections;
@using System.Buffers.Binary;

<Div Overflow="Overflow.Auto">
    <Card>
        <Grid Columns="GridColumns.Are2" Gap="Gap.Is1">
            <SelectList TItem="AccessMaskType"
                        TValue="AccessMaskType"
                        Data="Enum.GetValues<AccessMaskType>().Where(t => t!=AccessMaskType.Unknown)"
                        TextField="@(item => item.ToString())"
                        ValueField="@(item => item)"
                        @bind-SelectedValue="@TargetAccessMaskType" />
            <Div Flex="Flex.AlignItems.Center">
                <Switch @bind-Checked="@HexInput" Display="Display.Inline">@(HexInput ? "HEX" : "DEC")</Switch>
                @if (HexInput)
                {
                    <TextEdit @bind-Text="@MaskValueHex" Display="Display.Inline" Margin="Margin.Is1.FromStart" />
                }
                else
                {
                    <NumericEdit @bind-Value="@MaskValue" Display="Display.Inline" Margin="Margin.Is1.FromStart" />
                }
            </Div>
        </Grid>

        <MemoEdit ReadOnly Text="@CastedText" Margin="Margin.Is1.FromTop" />
    </Card>

    <TreeView Nodes="AccessMaskTreeHead"
              GetChildNodes="@(item => item.Children)"
              HasChildNodes="@(item => item.HasChildren)"
              ExpandedNodes="AccessMaskTreeHead"
              Padding="Padding.Is3.FromBottom">
        <NodeContent>
            @if (context.Tag != null)
            {
                <Check TValue="bool" @bind-Checked="@maskBits[(int)context.Tag]" />
            }
            <Text TextWeight="TextWeight.Bold" Class="monospace-text">@(context.Label):</Text>
            <Text Padding="Padding.Is1.FromStart" Class="monospace-text">@context.Description</Text>
        </NodeContent>
    </TreeView>
</Div>

<style>
    .fui-Checkbox__input + .fui-Checkbox__indicator {
        margin: 0
    }
</style>

@code {
    bool HexInput = false;
    TreeViewItem[] AccessMaskTreeHead = null!;
    AccessMaskType targetAccessMaskType = AccessMaskType.File;
    AccessMaskType TargetAccessMaskType
    {
        get => targetAccessMaskType;
        set
        {
            targetAccessMaskType = value;
            GenerateTree();
        }
    }
    BitArray maskBits = new(32);
    uint MaskValue
    {
        get
        {
            var intArr = new int[1];
            maskBits.CopyTo(intArr, 0);
            return (uint)intArr[0];
        }
        set
        {
            maskBits = new(BitConverter.GetBytes(value));
            GenerateTree();
        }
    }
    string MaskValueHex
    {
        get => MaskValue.ToString("X");
        set
        {
            try
            {
                if (value.Length > 8) value = value[0..8];
                else { value = value.PadLeft(8, '0'); }
                MaskValue = BinaryPrimitives.ReadUInt32BigEndian(Convert.FromHexString(value));
            }
            catch { }
        }
    }
    string CastedText
    {
        get
        {
            AccessMask Mask = new()
                {
                    Full = MaskValue,
                    ObjectType = targetAccessMaskType,
                };
            return string.Join(',', Mask.ToStrings());
        }
    }

    protected override void OnInitialized()
    {
        GenerateTree();
    }

    void GenerateTree()
    {
        AccessMaskTreeHead = new TreeViewItem[2];
        var longest = WinSdTreeViewExtension.CalcLongestNameLen(targetAccessMaskType, out var TargetType);
        AccessMaskTreeHead[0] = new TreeViewItem()
            {
                Label = $"Object Specific ({TargetAccessMaskType})",
            };
        AccessMaskTreeHead[0].Children = WinSdTreeViewExtension.AccessMaskToTreeViewItems(MaskValue, TargetType, longest, false);
        AccessMaskTreeHead[1] = new TreeViewItem()
            {
                Label = "Generic",
            };
        AccessMaskTreeHead[1].Children = WinSdTreeViewExtension.AccessMaskToTreeViewItems(MaskValue, typeof(AccessMask_Standard), longest, true);
    }
}
