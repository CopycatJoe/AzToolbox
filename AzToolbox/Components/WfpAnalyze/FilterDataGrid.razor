@using WFPXML.Model

<DataGrid TItem="Filter"
          Data="@Filters"
          DetailRowStartsVisible="false"
          Filterable="true"
          FilterMode="DataGridFilterMode.Menu"
          Narrow="true"
          ShowPager="true"
          ShowPageSizes="true"
          @bind-PageSize="@pageSize"
          PageSizes="@(new int[]{50,100,200,300,400,500,1000,5000})"
          Groupable="true"
          ShowGrouping="true"
          Bordered="true"
          Resizable="true"
          ResizeMode="TableResizeMode.Columns"
          Style="font-size:small">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(Filter.Id)" Caption="Filter ID" Sortable="true" />
        <DataGridColumn Field="@nameof(Filter.EffectiveWeight)" Caption="Effective Weight" Sortable="true" />
        <DataGridColumn Field="@nameof(Filter.Name)" Caption="Name" Sortable="false" />
        <DataGridColumn Field="@nameof(Filter.LayerKey)" Caption="LayerKey" Sortable="false" Groupable="true" Grouping="true" />
        <DataGridColumn Field="@nameof(Filter.SubLayerKey)" Caption="SubLayerKey" Sortable="false" Groupable="true" Grouping="true" />
        <DataGridColumn Field="@nameof(Filter.Action)" Caption="Action" Sortable="false" Groupable="true" />
    </DataGridColumns>
    <DetailRowTemplate>
        @{
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <MemoEdit Text="@context.Description" Disabled AutoSize Size="Size.Small" />
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Weight</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit Text="@context.Weight" Disabled Size="Size.Small" />
                </FieldBody>
            </Field>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Flags</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <MemoEdit Text="@string.Join(Environment.NewLine,context.Flags)" Disabled AutoSize Size="Size.Small" />
                </FieldBody>
            </Field>
            @if (!string.IsNullOrEmpty(context.CalloutKey) && Callouts != null)
            {
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Callout</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Table Bordered Narrow Responsive>
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell ColumnSpan="2">@context.CalloutKey</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                <TableRow>
                                    <TableHeaderCell>ID</TableHeaderCell>
                                    <TableRowCell>@Callouts![context.CalloutKey!].Id</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Name</TableHeaderCell>
                                    <TableRowCell>@Callouts![context.CalloutKey!].Name</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Description</TableHeaderCell>
                                    <TableRowCell>@Callouts![context.CalloutKey!].Description</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Applicable Layer</TableHeaderCell>
                                    <TableRowCell>@Callouts![context.CalloutKey!].ApplicableLayer</TableRowCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </FieldBody>
                </Field>
                @if (@Callouts![context.CalloutKey!].ProviderKey != context.ProviderKey 
                    && !string.IsNullOrEmpty(Callouts![context.CalloutKey!].ProviderKey) 
                    && Providers != null)
                {
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is2">Context Provider</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <Table Bordered Narrow Responsive>
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell ColumnSpan="2">@Callouts![context.CalloutKey!].ProviderKey</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    <TableRow>
                                        <TableHeaderCell>Name</TableHeaderCell>
                                        <TableRowCell>@Providers![Callouts![context.CalloutKey!].ProviderKey].Name</TableRowCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableHeaderCell>Description</TableHeaderCell>
                                        <TableRowCell>@Providers![Callouts![context.CalloutKey!].ProviderKey].Description</TableRowCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableHeaderCell>Service Name</TableHeaderCell>
                                        <TableRowCell>@Providers![Callouts![context.CalloutKey!].ProviderKey].ServiceName</TableRowCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableHeaderCell>Flags</TableHeaderCell>
                                        <TableRowCell>@string.Join(Environment.NewLine, Providers![Callouts![context.CalloutKey!].ProviderKey].Flags)</TableRowCell>
                                    </TableRow>
                                </TableBody>
                            </Table>
                        </FieldBody>
                    </Field>
                }
            }
            @if (!string.IsNullOrEmpty(context.ProviderKey) && Providers != null)
            {
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Provider</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Table Bordered Narrow Responsive>
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell ColumnSpan="2">@context.ProviderKey</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                <TableRow>
                                    <TableHeaderCell>Name</TableHeaderCell>
                                    <TableRowCell>@Providers![context.ProviderKey!].Name</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Description</TableHeaderCell>
                                    <TableRowCell>@Providers![context.ProviderKey!].Description</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Service Name</TableHeaderCell>
                                    <TableRowCell>@Providers![context.ProviderKey!].ServiceName</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Flags</TableHeaderCell>
                                    <TableRowCell>@string.Join(Environment.NewLine, Providers![context.ProviderKey!].Flags)</TableRowCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </FieldBody>
                </Field>
            }
            @if (!string.IsNullOrEmpty(context.ProviderContextKey) && ProviderContexts != null)
            {
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Provider Context</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Table Bordered Narrow Responsive>
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell ColumnSpan="2">@context.ProviderContextKey</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                <TableRow>
                                    <TableHeaderCell>Name</TableHeaderCell>
                                    <TableRowCell>@ProviderContexts![context.ProviderContextKey!].Name</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Description</TableHeaderCell>
                                    <TableRowCell>@ProviderContexts![context.ProviderContextKey!].Description</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Type</TableHeaderCell>
                                    <TableRowCell>@ProviderContexts![context.ProviderContextKey!].Type</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Data</TableHeaderCell>
                                    <TableRowCell Class="wrap_cell">@ProviderContexts![context.ProviderContextKey!].Data</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableHeaderCell>Flags</TableHeaderCell>
                                    <TableRowCell>@string.Join(Environment.NewLine, ProviderContexts![context.ProviderContextKey!].Flags)</TableRowCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </FieldBody>
                </Field>
            }
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">Condition</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <Table Bordered Narrow Responsive>
                        <TableHeader>
                            <TableRow>
                                <TableRowHeader>Field</TableRowHeader>
                                <TableRowHeader>Match</TableRowHeader>
                                <TableRowHeader>Value</TableRowHeader>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var cond in context.Condition)
                            {
                                <TableRow>
                                    <TableRowCell>@cond.Item1</TableRowCell>
                                    <TableRowCell>@cond.Item2</TableRowCell>
                                    <TableRowCell Class="wrap_cell">@cond.Item3</TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </FieldBody>
            </Field>
        }
    </DetailRowTemplate>
    <TotalItemsTemplate><Badge Color="Color.Primary">@context.TotalItems total items</Badge></TotalItemsTemplate>
    <TotalItemsShortTemplate><Badge Color="Color.Primary">@context.TotalItems</Badge></TotalItemsShortTemplate>
</DataGrid>

<style>
    .wrap_cell {
        word-break: break-word;
    }
</style>

@code {
    [Parameter]
    public IEnumerable<Filter> Filters { get; set; } = Array.Empty<Filter>();

    [Parameter]
    public Dictionary<string, Callout>? Callouts { get; set; }

    [Parameter]
    public Dictionary<string, Provider>? Providers { get; set; }

    [Parameter]
    public Dictionary<string, ProviderContext>? ProviderContexts { get; set; }

    int pageSize = 200;
}
